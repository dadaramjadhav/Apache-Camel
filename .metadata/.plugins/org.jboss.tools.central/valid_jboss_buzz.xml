<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" media="screen" href="/~d/styles/atom10full.xsl"?><?xml-stylesheet type="text/css" media="screen" href="http://feeds.feedburner.com/~d/styles/itemcontent.css"?><feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0"><title>JBoss Tools Aggregated Feed</title><link rel="alternate" href="http://tools.jboss.org" /><subtitle>JBoss Tools Aggregated Feed</subtitle><dc:creator>JBoss Tools</dc:creator><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="self" type="application/atom+xml" href="http://feeds.feedburner.com/jbossbuzz" /><feedburner:info uri="jbossbuzz" /><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="hub" href="http://pubsubhubbub.appspot.com/" /><entry><title>Customize the compilation process with Clang: Optimization options</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/g_VCSlCoTbU/" /><category term="clang" scheme="searchisko:content:tags" /><category term="Clang/LLVM" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="performance" scheme="searchisko:content:tags" /><author><name>Serge Guelton</name></author><id>searchisko:content:id:jbossorg_blog-customize_the_compilation_process_with_clang_optimization_options</id><updated>2019-08-05T07:00:52Z</updated><published>2019-08-05T07:00:52Z</published><content type="html">&lt;p&gt;When using C++, developers generally aim to keep a high level of abstraction without sacrificing performance. That&amp;#8217;s the famous motto &amp;#8220;&lt;em&gt;costless abstractions&lt;/em&gt;.&amp;#8221; Yet the C++ language actually doesn&amp;#8217;t give a lot of guarantees to developers in terms of performance. You can have the guarantee of copy-elision or compile-time evaluation, but key optimizations like &lt;em&gt;inlining&lt;/em&gt;, &lt;em&gt;unrolling&lt;/em&gt;, &lt;em&gt;constant propagation&lt;/em&gt; or, dare I say, &lt;em&gt;tail call elimination&lt;/em&gt; are subject to the goodwill of the standard&amp;#8217;s best friend: the compiler.&lt;/p&gt; &lt;p&gt;This article focuses on the &lt;a href="https://clang.llvm.org"&gt;Clang&lt;/a&gt; compiler and the various flags it offers to customize the compilation process. I&amp;#8217;ve tried to keep this from being a boring list, and it certainly is not an exhaustive one.&lt;span id="more-614867"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;This write-up is an expanded version of the talk &amp;#8220;&lt;a href="http://serge-sans-paille.github.io/talks/cppp2019/output/index.html"&gt;Merci le Compilo&amp;#8221;&lt;/a&gt; given at &lt;a href="https://cppp.fr/"&gt;CPPP&lt;/a&gt; on June 15, 2019.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;clang&lt;/code&gt; version used is based on trunk, running on RHEL 7.&lt;/p&gt; &lt;p&gt;Every now and then, I&amp;#8217;ll be using &lt;a href="https://www.sqlite.org/amalgamation.html"&gt;the SQLite Amalgamation&lt;/a&gt; C source as a large third-party code. Let&amp;#8217;s assume that the following line has been sourced:&lt;/p&gt; &lt;pre class="code shell"&gt;&lt;span class="name variable"&gt;sq&lt;/span&gt;&lt;span class="operator"&gt;=&lt;/span&gt;https://raw.githubusercontent.com/azadkuh/sqlite-amalgamation/master/sqlite3.c &lt;/pre&gt; &lt;h2&gt;Introduction: Stating goals&lt;/h2&gt; &lt;p&gt;The following source code is a relatively dumb version of a program that sums up numbers read from standard input. It&amp;#8217;s most likely memory bound, but there&amp;#8217;s still some processing going on:&lt;/p&gt; &lt;pre class="code C++"&gt;&lt;span class="comment preproc"&gt;#include&lt;/span&gt; &lt;span class="comment preprocfile"&gt;&amp;#60;iostream&amp;#62;&lt;/span&gt; &lt;span class="keyword type"&gt;int&lt;/span&gt; &lt;span class="name function"&gt;main&lt;/span&gt;&lt;span class="punctuation"&gt;(&lt;/span&gt;&lt;span class="keyword type"&gt;int&lt;/span&gt; &lt;span class="name"&gt;argc&lt;/span&gt;&lt;span class="punctuation"&gt;,&lt;/span&gt; &lt;span class="keyword type"&gt;char&lt;/span&gt;&lt;span class="operator"&gt;**&lt;/span&gt; &lt;span class="name"&gt;argv&lt;/span&gt;&lt;span class="punctuation"&gt;)&lt;/span&gt; &lt;span class="punctuation"&gt;{&lt;/span&gt; &lt;span class="keyword type"&gt;long&lt;/span&gt; &lt;span class="name"&gt;s&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="literal number integer"&gt;0&lt;/span&gt;&lt;span class="punctuation"&gt;;&lt;/span&gt; &lt;span class="keyword"&gt;while&lt;/span&gt; &lt;span class="punctuation"&gt;(&lt;/span&gt;&lt;span class="name"&gt;std&lt;/span&gt;&lt;span class="operator"&gt;::&lt;/span&gt;&lt;span class="name"&gt;cin&lt;/span&gt;&lt;span class="punctuation"&gt;)&lt;/span&gt; &lt;span class="punctuation"&gt;{&lt;/span&gt; &lt;span class="keyword type"&gt;long&lt;/span&gt; &lt;span class="name"&gt;tmp&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="literal number integer"&gt;0&lt;/span&gt;&lt;span class="punctuation"&gt;;&lt;/span&gt; &lt;span class="name"&gt;std&lt;/span&gt;&lt;span class="operator"&gt;::&lt;/span&gt;&lt;span class="name"&gt;cin&lt;/span&gt; &lt;span class="operator"&gt;&amp;#62;&amp;#62;&lt;/span&gt; &lt;span class="name"&gt;tmp&lt;/span&gt;&lt;span class="punctuation"&gt;;&lt;/span&gt; &lt;span class="name"&gt;s&lt;/span&gt; &lt;span class="operator"&gt;+=&lt;/span&gt; &lt;span class="name"&gt;tmp&lt;/span&gt;&lt;span class="punctuation"&gt;;&lt;/span&gt; &lt;span class="punctuation"&gt;}&lt;/span&gt; &lt;span class="name"&gt;std&lt;/span&gt;&lt;span class="operator"&gt;::&lt;/span&gt;&lt;span class="name"&gt;cout&lt;/span&gt; &lt;span class="operator"&gt;&amp;#60;&amp;#60;&lt;/span&gt; &lt;span class="name"&gt;s&lt;/span&gt; &lt;span class="operator"&gt;&amp;#60;&amp;#60;&lt;/span&gt; &lt;span class="name"&gt;std&lt;/span&gt;&lt;span class="operator"&gt;::&lt;/span&gt;&lt;span class="name"&gt;endl&lt;/span&gt;&lt;span class="punctuation"&gt;;&lt;/span&gt; &lt;span class="keyword"&gt;return&lt;/span&gt; &lt;span class="literal number integer"&gt;0&lt;/span&gt;&lt;span class="punctuation"&gt;;&lt;/span&gt; &lt;span class="punctuation"&gt;}&lt;/span&gt; &lt;/pre&gt; &lt;p&gt;This is a relatively similar—but not equivalent—program written in Python. Python uses big integers by default so it behaves differently with respect to overflow, but it&amp;#8217;s enough for our purposes.&lt;/p&gt; &lt;pre class="code Python"&gt;&lt;span class="keyword namespace"&gt;import&lt;/span&gt; &lt;span class="name namespace"&gt;sys&lt;/span&gt; &lt;span class="keyword"&gt;print&lt;/span&gt;&lt;span class="punctuation"&gt;(&lt;/span&gt;&lt;span class="name builtin"&gt;sum&lt;/span&gt;&lt;span class="punctuation"&gt;(&lt;/span&gt;&lt;span class="name builtin"&gt;int&lt;/span&gt;&lt;span class="punctuation"&gt;(&lt;/span&gt;&lt;span class="name"&gt;x&lt;/span&gt;&lt;span class="punctuation"&gt;)&lt;/span&gt; &lt;span class="keyword"&gt;for&lt;/span&gt; &lt;span class="name"&gt;x&lt;/span&gt; &lt;span class="operator word"&gt;in&lt;/span&gt; &lt;span class="name"&gt;sys&lt;/span&gt;&lt;span class="operator"&gt;.&lt;/span&gt;&lt;span class="name"&gt;stdin&lt;/span&gt;&lt;span class="operator"&gt;.&lt;/span&gt;&lt;span class="name"&gt;readlines&lt;/span&gt;&lt;span class="punctuation"&gt;()))&lt;/span&gt; &lt;/pre&gt; &lt;p&gt;Let&amp;#8217;s take a dumb approach and measure the execution time of these two programs on a relatively large input set:&lt;/p&gt; &lt;pre class="code sh"&gt;$ seq &lt;span class="literal number"&gt;1000000&lt;/span&gt; &amp;#62; numbers $ clang++ sum.cpp -o sum $ &lt;span class="name builtin"&gt;time&lt;/span&gt; ./sum &amp;#60; numbers &lt;span class="literal number"&gt;0&lt;/span&gt;.61s user &lt;span class="literal number"&gt;0&lt;/span&gt;.01s system &lt;span class="literal number"&gt;94&lt;/span&gt;% cpu &lt;span class="literal number"&gt;0&lt;/span&gt;.659 total $ &lt;span class="name builtin"&gt;time&lt;/span&gt; python sum.py &amp;#60; numbers &lt;span class="literal number"&gt;0&lt;/span&gt;.77s user &lt;span class="literal number"&gt;0&lt;/span&gt;.04s system &lt;span class="literal number"&gt;99&lt;/span&gt;% cpu &lt;span class="literal number"&gt;0&lt;/span&gt;.818 total &lt;/pre&gt; &lt;p&gt;The native code certainly is faster, but not by much. We can&amp;#8217;t draw too many conclusions from a single run, but there&amp;#8217;s at least one sure thing: The &lt;code&gt;clang&lt;/code&gt; user has not specified their intent, so the compiler just generated a valid binary—this is thankfully a hard constraint—and didn&amp;#8217;t try to optimize it for whatever metric its user is interested in.&lt;/p&gt; &lt;p&gt;Had the user wanted to optimize for execution speed, they should have specified that intent, say, through the &lt;code&gt;-O2&lt;/code&gt; flag:&lt;/p&gt; &lt;pre class="code sh"&gt;$ clang++ -O2 sum.cpp -o sum $ &lt;span class="name builtin"&gt;time&lt;/span&gt; ./count &amp;#60; numbers &lt;span class="literal number"&gt;0&lt;/span&gt;.34s user &lt;span class="literal number"&gt;0&lt;/span&gt;.00s system &lt;span class="literal number"&gt;99&lt;/span&gt;% cpu &lt;span class="literal number"&gt;0&lt;/span&gt;.348 total &lt;/pre&gt; &lt;h2&gt;Multi-criteria optimization&lt;/h2&gt; &lt;p&gt;For a wide range of codebases, there&amp;#8217;s something more than just &lt;em&gt;optimize for speed.&lt;/em&gt; Sometimes, you want to limit the size of the binary; sometimes, you&amp;#8217;re okay with trading speed for extra security. This also depends on where you are in the development life cycle. During code editing, for example, you want a fast analysis of your code, and during bug tracking, you want as much debug information as possible, etc.&lt;/p&gt; &lt;pre&gt; # ## # ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## # ## ## ## ## ## ## PERF DEBUG EDIT SECU SIZE &lt;/pre&gt; &lt;h3&gt;Performance&lt;/h3&gt; &lt;p&gt;&lt;em&gt;I want the generated binary to run fast&lt;/em&gt; is a very common query for the compiler, so the following flags are among the most used ones:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;code&gt;-O0&lt;/code&gt;: No optimization at all.&lt;/li&gt; &lt;li&gt;&lt;code&gt;-O1&lt;/code&gt;: &lt;span class="formula"&gt;&lt;span class="text"&gt;O1&lt;/span&gt; = &lt;span class="fraction"&gt;&lt;span class="ignored"&gt;(&lt;/span&gt;&lt;span class="numerator"&gt;&lt;span class="text"&gt;O0&lt;/span&gt; + &lt;span class="text"&gt;O2&lt;/span&gt;&lt;/span&gt;&lt;span class="ignored"&gt;)/(&lt;/span&gt;&lt;span class="denominator"&gt;2&lt;/span&gt;&lt;span class="ignored"&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;. I scarcely use this flag.&lt;/li&gt; &lt;li&gt;&lt;code&gt;-O2&lt;/code&gt;: Optimize as much as possible, without taking the risk of significantly increasing the binary size or degrading performance.&lt;/li&gt; &lt;li&gt;&lt;code&gt;-O3&lt;/code&gt;: Optimize even more, trading binary size for speed, and sometimes making decisions that may negatively impact performance.&lt;/li&gt; &lt;li&gt;&lt;code&gt;-O4&lt;/code&gt;: &lt;span class="formula"&gt;&lt;span class="text"&gt;O3&lt;/span&gt; = &lt;span class="text"&gt;O4&lt;/span&gt;&lt;/span&gt;. This is a myth.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;strong&gt;Bonus:&lt;/strong&gt; &lt;code&gt;-O3 -mllvm -polly&lt;/code&gt; activates polyhedral optimizations, if Clang was compiled with Polly support.&lt;/p&gt; &lt;h3&gt;Debug&lt;/h3&gt; &lt;p&gt;&lt;em&gt;I want to debug my code, I don&amp;#8217;t care about performance&lt;/em&gt; is sadly a common request too :-/&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;code&gt;-g&lt;/code&gt;: Include debug information.&lt;/li&gt; &lt;li&gt;&lt;code&gt;-Og&lt;/code&gt;: &lt;code&gt;== -O1 -g&lt;/code&gt;. That&amp;#8217;s already a trade-off between performance and debuggability.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For the curious ones, the following snippet verifies that debug information sections are actually generated when passing the &lt;code&gt;-g&lt;/code&gt; flag:&lt;/p&gt; &lt;pre class="code sh"&gt;$ curl &lt;span class="name variable"&gt;$sq&lt;/span&gt; &lt;span class="punctuation"&gt;|&lt;/span&gt; clang -xc -c -g - -o sq.o $ objdump -h sq.o &lt;span class="punctuation"&gt;|&lt;/span&gt; grep debug &lt;span class="comment single"&gt;# name size ... &lt;/span&gt; &lt;span class="literal number"&gt;9&lt;/span&gt; .debug_str 00012b2d ... &lt;span class="literal number"&gt;10&lt;/span&gt; .debug_abbrev 0000038d ... &lt;span class="literal number"&gt;11&lt;/span&gt; .debug_info 0005056c ... &lt;span class="literal number"&gt;12&lt;/span&gt; .debug_ranges &lt;span class="literal number"&gt;00000240&lt;/span&gt; ... &lt;span class="literal number"&gt;13&lt;/span&gt; .debug_macinfo &lt;span class="literal number"&gt;00000001&lt;/span&gt; ... &lt;span class="literal number"&gt;14&lt;/span&gt; .debug_pubnames 0000c73a ... &lt;span class="literal number"&gt;15&lt;/span&gt; .debug_pubtypes &lt;span class="literal number"&gt;00001068&lt;/span&gt; ... &lt;span class="literal number"&gt;19&lt;/span&gt; .debug_line &lt;span class="literal number"&gt;00073402&lt;/span&gt; ... &lt;/pre&gt; &lt;h3&gt;Security&lt;/h3&gt; &lt;p&gt;&lt;em&gt;I want to protect my code from others—and myself&lt;/em&gt; is growing in importance these days. There aren&amp;#8217;t a lot of flags that impact security without impacting performance, but it&amp;#8217;s worth mentioning &lt;code&gt;-D_FORTIFY_SOURCE=2&lt;/code&gt;. This picks a different declaration for a few functions, for example:&lt;/p&gt; &lt;pre class="code sh"&gt;$ clang -xc -c -O2 - -S -emit-llvm -o - -D_FORTIFY_SOURCE&lt;span class="operator"&gt;=&lt;/span&gt;&lt;span class="literal number"&gt;2&lt;/span&gt; &lt;span class="literal string"&gt;&amp;#60;&amp;#60; EOF #include &amp;#60;stdio.h&amp;#62; void foo(char *s) { printf(s, s); } EOF&lt;/span&gt; define void @foo&lt;span class="operator"&gt;(&lt;/span&gt;i8*&lt;span class="operator"&gt;)&lt;/span&gt; &lt;span class="operator"&gt;{&lt;/span&gt; %2 &lt;span class="operator"&gt;=&lt;/span&gt; tail call i32 &lt;span class="operator"&gt;(&lt;/span&gt;i32, i8*, ...&lt;span class="operator"&gt;)&lt;/span&gt; @__printf_chk&lt;span class="operator"&gt;(&lt;/span&gt;i32 &lt;span class="literal number"&gt;1&lt;/span&gt;, i8* %0, i8* %0&lt;span class="operator"&gt;)&lt;/span&gt; ret void &lt;span class="operator"&gt;}&lt;/span&gt; &lt;/pre&gt; &lt;p&gt;The macro definition enables a hardened version of &lt;code&gt;printf&lt;/code&gt;, namely &lt;code&gt;__printf_chk&lt;/code&gt;, that also checks the number of variadic argument.&lt;/p&gt; &lt;h3&gt;Size&lt;/h3&gt; &lt;p&gt;&lt;em&gt;I want to do some kind of weight control over my binary&lt;/em&gt; may be a valid requirement for some embedded system. In that case, you can use:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;code&gt;-Os&lt;/code&gt;: Same as &lt;code&gt;-O2&lt;/code&gt; with extra code size optimization, including different parameters for transformations like &lt;em&gt;inlining&lt;/em&gt;.&lt;/li&gt; &lt;li&gt;&lt;code&gt;-Oz&lt;/code&gt;: Same as &lt;code&gt;-Os&lt;/code&gt; with more size optimizations, at the price of less performance.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Let&amp;#8217;s showcase the impact of theses flags on the amalgamation binary:&lt;/p&gt; &lt;pre class="code sh"&gt;$ curl &lt;span class="name variable"&gt;$sq&lt;/span&gt;&lt;span class="punctuation"&gt;|&lt;/span&gt;clang -xc - -O2 -c -o-&lt;span class="punctuation"&gt;|&lt;/span&gt;wc -c &lt;span class="literal number"&gt;1488400&lt;/span&gt; $ curl &lt;span class="name variable"&gt;$sq&lt;/span&gt;&lt;span class="punctuation"&gt;|&lt;/span&gt;clang -xc - -Os -c -o-&lt;span class="punctuation"&gt;|&lt;/span&gt;wc -c &lt;span class="literal number"&gt;850696&lt;/span&gt; $ curl &lt;span class="name variable"&gt;$sq&lt;/span&gt;&lt;span class="punctuation"&gt;|&lt;/span&gt;clang -xc - -Oz -c -o-&lt;span class="punctuation"&gt;|&lt;/span&gt;wc -c &lt;span class="literal number"&gt;796976&lt;/span&gt; &lt;/pre&gt; &lt;h3&gt;Editing&lt;/h3&gt; &lt;p&gt;The compiler also helps to produce better code through a bunch of warning and code-editing features:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;code&gt;-Wall&lt;/code&gt;: (Almost) all warnings.&lt;/li&gt; &lt;li&gt;&lt;code&gt;-Werror[=...]&lt;/code&gt;: If you believe that a warning should be an error, you can selectively enable that feature, per warning.&lt;/li&gt; &lt;li&gt;&lt;code&gt;-w&lt;/code&gt;: If you don&amp;#8217;t know what it does, you probably don&amp;#8217;t want to &lt;img src="https://s.w.org/images/core/emoji/11.2.0/72x72/1f642.png" alt="" class="wp-smiley" style="height: 1em; max-height: 1em;" /&gt;&lt;/li&gt; &lt;li&gt;&lt;code&gt;-Xclang -code-completion-at&lt;/code&gt;: An internal flag that can be used by IDE to provide &lt;em&gt;smart&lt;/em&gt; code completion.&lt;/li&gt; &lt;/ul&gt; &lt;pre class="code sh"&gt;$ cat hello.cpp &lt;span class="comment single"&gt;#include &amp;#60;iostream&amp;#62; &lt;/span&gt;int main&lt;span class="operator"&gt;(&lt;/span&gt;int argc, char**argv&lt;span class="operator"&gt;)&lt;/span&gt; &lt;span class="operator"&gt;{&lt;/span&gt; std::co $ clang++ -Xclang -code-completion-at&lt;span class="operator"&gt;=&lt;/span&gt;hello.cpp:3:10 -fsyntax-only hello.cpp COMPLETION: codecvt : codecvt&amp;#60;&amp;#60;&lt;span class="comment single"&gt;#typename _InternT#&amp;#62;, &amp;#60;#typename _ExternT#&amp;#62;, &amp;#60;#typename _StateT#&amp;#62;&amp;#62; &lt;/span&gt;COMPLETION: codecvt_base : codecvt_base ... COMPLETION: cout : &lt;span class="operator"&gt;[&lt;/span&gt;&lt;span class="comment single"&gt;#ostream#]cout&lt;/span&gt; &lt;/pre&gt; &lt;p&gt;In this case, &lt;code&gt;clang&lt;/code&gt; outputs all identifiers starting with &lt;code&gt;co&lt;/code&gt; available in namespace &lt;code&gt;std&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;In the next article, we&amp;#8217;ll look at various compromises and tradeoffs involved in optimization, such as debug precision versus binary size, the impact of the optimization level on compilation time, and performance versus security. Stay tuned.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F05%2Fcustomize-the-compilation-process-with-clang-optimization-options%2F&amp;#38;linkname=Customize%20the%20compilation%20process%20with%20Clang%3A%20Optimization%20options" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F05%2Fcustomize-the-compilation-process-with-clang-optimization-options%2F&amp;#38;linkname=Customize%20the%20compilation%20process%20with%20Clang%3A%20Optimization%20options" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F05%2Fcustomize-the-compilation-process-with-clang-optimization-options%2F&amp;#38;linkname=Customize%20the%20compilation%20process%20with%20Clang%3A%20Optimization%20options" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F05%2Fcustomize-the-compilation-process-with-clang-optimization-options%2F&amp;#38;linkname=Customize%20the%20compilation%20process%20with%20Clang%3A%20Optimization%20options" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F05%2Fcustomize-the-compilation-process-with-clang-optimization-options%2F&amp;#38;linkname=Customize%20the%20compilation%20process%20with%20Clang%3A%20Optimization%20options" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F05%2Fcustomize-the-compilation-process-with-clang-optimization-options%2F&amp;#38;linkname=Customize%20the%20compilation%20process%20with%20Clang%3A%20Optimization%20options" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F05%2Fcustomize-the-compilation-process-with-clang-optimization-options%2F&amp;#38;linkname=Customize%20the%20compilation%20process%20with%20Clang%3A%20Optimization%20options" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F05%2Fcustomize-the-compilation-process-with-clang-optimization-options%2F&amp;#038;title=Customize%20the%20compilation%20process%20with%20Clang%3A%20Optimization%20options" data-a2a-url="https://developers.redhat.com/blog/2019/08/05/customize-the-compilation-process-with-clang-optimization-options/" data-a2a-title="Customize the compilation process with Clang: Optimization options"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/08/05/customize-the-compilation-process-with-clang-optimization-options/"&gt;Customize the compilation process with Clang: Optimization options&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/g_VCSlCoTbU" height="1" width="1" alt=""/&gt;</content><summary>When using C++, developers generally aim to keep a high level of abstraction without sacrificing performance. That’s the famous motto “costless abstractions.” Yet the C++ language actually doesn’t give a lot of guarantees to developers in terms of performance. You can have the guarantee of copy-elision or compile-time evaluation, but key optimizations like inlining, unrolling, constant propagation...</summary><dc:creator>Serge Guelton</dc:creator><dc:date>2019-08-05T07:00:52Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/08/05/customize-the-compilation-process-with-clang-optimization-options/</feedburner:origLink></entry><entry><title>Beginners Guide - Building an Online Retail Web Shop Workshop (Technical Rules)</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/2EtrvzdhwCE/beginners-guide-building-online-retail-web-shop-workshop-technical-rules.html" /><category term="AppDev" scheme="searchisko:content:tags" /><category term="Automate" scheme="searchisko:content:tags" /><category term="Decision Manager" scheme="searchisko:content:tags" /><category term="feed_group_name_global" scheme="searchisko:content:tags" /><category term="feed_name_ericschabell" scheme="searchisko:content:tags" /><category term="JBoss" scheme="searchisko:content:tags" /><category term="workshops" scheme="searchisko:content:tags" /><author><name>Eric D. Schabell</name></author><id>searchisko:content:id:jbossorg_blog-beginners_guide_building_an_online_retail_web_shop_workshop_technical_rules</id><updated>2019-08-05T05:00:01Z</updated><published>2019-08-05T05:00:00Z</published><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://bpmworkshop.gitlab.io/rhdm/lab01.html" imageanchor="1" style="clear: left; float: left; margin-bottom: 1em; margin-right: 1em;" target="_blank"&gt;&lt;img alt="beginners guide red hat decision manager" border="0" data-original-height="843" data-original-width="1600" height="168" src="https://1.bp.blogspot.com/-cR3PsiJzOsk/XQuCt-IFI6I/AAAAAAAAvKM/NeGXvos8ok845AeXO5Dv-7LHFOwkWBOUgCLcBGAs/s320/Screenshot%2B2019-06-20%2Bat%2B14.49.30.png" title="" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;With the release of Red Hat Decision Manager 7.3 I've started updating my free online workshop, a beginners guide to building an online retail web shop.&lt;br /&gt;&lt;br /&gt;The previous article covered &lt;a href="https://www.schabell.org//2019/07/beginners-guide-building-an-online-retail-web-shop-workshop-guided-rules.html" target="_blank"&gt;creating a guided rule for your online retail web shop.&lt;/a&gt;. This update is the for the sixth lab in this workshop, with more to follow. Learn how to&amp;nbsp;create techical rules with Red Hat Decision Manager.&lt;br /&gt;&lt;br /&gt;Below you'll find the embedded lab slides with all the instructions you need.&lt;br /&gt;&lt;a name='more'&gt;&lt;/a&gt;&lt;br /&gt;&lt;h3 style="text-align: left;"&gt;Create a domain model&lt;/h3&gt;In&amp;nbsp;&lt;a href="https://bpmworkshop.gitlab.io/rhdm/lab06.html#/" target="_blank"&gt;lab 6 get hands-on creating technical rules&lt;/a&gt; in Red Hat Decision Manager:&lt;br /&gt;&lt;br /&gt;&lt;div align="center"&gt;&lt;iframe allowfullscreen="" frameborder="0" height="380" marginheight="0" marginwidth="0" scrolling="no" src="https://bpmworkshop.gitlab.io/rhdm/lab06.html#/" style="border-width: 1px; border: 1px solid #ccc; margin-bottom: 5px; max-width: 100%;" width="660"&gt;&lt;/iframe&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;Next up in this workshop, create a guided decision table.&lt;br /&gt;&lt;br /&gt;For more beginners guide workshops &lt;a href="https://bpmworkshop.gitlab.io/#/" target="_blank"&gt;please explore here&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="feedflare"&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=kdTai0gW4Qk:_JsfXyraKmM:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=kdTai0gW4Qk:_JsfXyraKmM:63t7Ie-LG7Y"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=63t7Ie-LG7Y" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=kdTai0gW4Qk:_JsfXyraKmM:4cEx4HpKnUU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=kdTai0gW4Qk:_JsfXyraKmM:4cEx4HpKnUU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=kdTai0gW4Qk:_JsfXyraKmM:F7zBnMyn0Lo"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=kdTai0gW4Qk:_JsfXyraKmM:F7zBnMyn0Lo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=kdTai0gW4Qk:_JsfXyraKmM:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=kdTai0gW4Qk:_JsfXyraKmM:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=kdTai0gW4Qk:_JsfXyraKmM:qj6IDK7rITs"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=qj6IDK7rITs" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=kdTai0gW4Qk:_JsfXyraKmM:gIN9vFwOqvQ"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=kdTai0gW4Qk:_JsfXyraKmM:gIN9vFwOqvQ" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/schabell/jboss/~4/kdTai0gW4Qk" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/2EtrvzdhwCE" height="1" width="1" alt=""/&gt;</content><summary>With the release of Red Hat Decision Manager 7.3 I've started updating my free online workshop, a beginners guide to building an online retail web shop. The previous article covered creating a guided rule for your online retail web shop.. This update is the for the sixth lab in this workshop, with more to follow. Learn how to create techical rules with Red Hat Decision Manager. Below you'll find t...</summary><dc:creator>Eric D. Schabell</dc:creator><dc:date>2019-08-05T05:00:00Z</dc:date><feedburner:origLink>http://feedproxy.google.com/~r/schabell/jboss/~3/kdTai0gW4Qk/beginners-guide-building-online-retail-web-shop-workshop-technical-rules.html</feedburner:origLink></entry><entry><title>This week in JBoss (August 2th 2019) - Live with Quarkus!</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/5yCftaHceLk/this-week-in-jboss-august-2th-2019-live-with-quarkus" /><category term="3scale" scheme="searchisko:content:tags" /><category term="Drools" scheme="searchisko:content:tags" /><category term="feed_group_name_global" scheme="searchisko:content:tags" /><category term="feed_name_weeklyeditorial" scheme="searchisko:content:tags" /><category term="keycloak" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><category term="quarkus" scheme="searchisko:content:tags" /><category term="reactive" scheme="searchisko:content:tags" /><category term="rhel" scheme="searchisko:content:tags" /><author><name>Romain Pelisse</name></author><id>searchisko:content:id:jbossorg_blog-this_week_in_jboss_august_2th_2019_live_with_quarkus</id><updated>2019-08-02T09:45:54Z</updated><published>2019-08-02T09:45:54Z</published><content type="html">&lt;!-- [DocumentBodyStart:d99d04d3-34d4-4915-b4fc-1bd8ffcc517a] --&gt;&lt;div class="jive-rendered-content"&gt;&lt;p&gt;&lt;em&gt;One of the latest and most innovative releases of our community has certainly been Quarkus. The project was published just a few months ago and it&amp;#8217;s not surprising that it is now the topic of many materials being released in the few weeks. But especially this week, we are lucky not to have just another article or blog post, but several video presentations all discussing using Quarkus in very different context. Enjoy!&lt;/em&gt;&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;h1&gt;Quarkus - Live from DevNation&lt;/h1&gt;&lt;p&gt;In the previous weeks, a few online presentations&amp;mdash;part of the Live From DevNation series, were released and are bound to be of interest for many of you, readers, as they all focus on the latest, shiny and bright little gem of our community, Quarkus:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a class="jive-link-external-small" href="https://developers.redhat.com/blog/2019/08/01/devnation-live-easily-secure-your-cloud-native-microservices-with-keycloak/" rel="nofollow"&gt;DevNation Live: Easily secure your cloud-native microservices with Keycloak&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class="jive-link-external-small" href="https://developers.redhat.com/blog/2019/07/26/devnation-live-subatomic-reactive-systems-with-quarkus/" rel="nofollow"&gt;DevNation Live: Subatomic reactive systems with Quarkus &lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class="jive-link-external-small" href="https://developers.redhat.com/blog/2019/07/23/devnation-live-introducing-kogito/" rel="nofollow"&gt;DevNation Live: Introducing Kogito &lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;h1&gt;Kogito Ergo Cloud&lt;/h1&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;The Kogito initiative is an ongoing effort to bring Drools to the cloud. To demonstrate how the rule engine fits into such an environment, the project contributors have launched a series of articles in the last weeks. The first installment was called &lt;a class="jive-link-external-small" href="http://blog.athico.com/2019/07/kogito-ergo-rules-part-1-bringing.html" rel="nofollow"&gt;Drools &amp;amp; jBPM: Kogito, ergo Rules &amp;mdash; Part 1: Bringing Drools Further&lt;/a&gt; and its followup &lt;a class="jive-link-external-small" href="http://blog.athico.com/2019/07/kogito-ergo-rules-part-2-all.html" rel="nofollow"&gt;Drools &amp;amp; jBPM: Kogito, ergo Rules &amp;mdash; Part 2: An All-Encompassing Execution Model for Rules&lt;/a&gt;&amp;#160; is now available too! Obviously, those two articles will be a perfect warm-up to the previously mentioned video presentation &lt;a class="jive-link-external-small" href="https://developers.redhat.com/blog/2019/07/23/devnation-live-introducing-kogito/" rel="nofollow"&gt;DevNation Live: Introducing Kogito &lt;/a&gt;.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;h1&gt;3Scale your way into CI/CD&lt;/h1&gt;&lt;p&gt;In the last weeks, a very nice series of articles on 3Scale have been released. Nicely organized, their use cases or example are around the topics of CI/CD using Jenkins and thus they form a nice, practical and very concrete example on how to use 3Scale:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a class="jive-link-external-small" href="https://developers.redhat.com/blog/2019/07/31/using-the-3scale-toolbox-jenkins-shared-library/" rel="nofollow"&gt;Using the 3scale toolbox Jenkins Shared Library&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class="jive-link-external-small" href="https://developers.redhat.com/blog/2019/07/30/deploy-your-api-from-a-jenkins-pipeline/" rel="nofollow"&gt;Deploy your API from a Jenkins Pipeline&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class="jive-link-external-small" href="https://developers.redhat.com/blog/2019/07/26/5-principles-for-deploying-your-api-from-a-ci-cd-pipeline/" rel="nofollow"&gt;3scale toolbox: Deploy an API from the CLII&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class="jive-link-external-small" href="https://developers.redhat.com/blog/2019/07/26/5-principles-for-deploying-your-api-from-a-ci-cd-pipeline/" rel="nofollow"&gt;5 principles for deploying your API from a CI/CD pipeline&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;h1&gt;Evangelist's Corner&lt;/h1&gt;&lt;p&gt;As always, our very own Eric D.Schabell has not forgotten the JBoss Community and he released a new &lt;a class="jive-link-external-small" href="http://www.schabell.org/2019/07/beginners-guide-building-an-online-retail-web-shop-workshop-guided-rules.html" rel="nofollow"&gt;Beginners Guide - Building an Online Retail Web Shop Workshop (Guided Rules)&lt;/a&gt;.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;h1&gt;Decaf'&lt;/h1&gt;&lt;p&gt;Enough about Quarkus, Drools and other Java technologies? Feel like trying something else or look at some other cool stuff, that could help you in your daily work. Well, you're in luck, last week, a very cool article on &lt;a class="jive-link-external-small" href="https://developers.redhat.com/blog/2019/07/25/controlling-red-hat-openshift-from-an-openshift-pod/" rel="nofollow"&gt;Controlling Red Hat OpenShift from an OpenShift pod&lt;/a&gt; was released. This is bound to be nifty, isn't it? But if OpenShift is not your jam, don't worry, we also this nice overview of &lt;a class="jive-link-external-small" href="https://developers.redhat.com/blog/2019/07/24/red-hat-enterprise-linux-8-1-beta-brings-new-development-tools/" rel="nofollow"&gt;Red Hat Enterprise Linux 8.1 Beta new development tools &lt;/a&gt;.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;&lt;em&gt;That's all for this week's edition of the Editorial, please join us next time as we continue our journey through the JBoss Communities in search of interesting articles and news. &lt;/em&gt;&lt;/p&gt;&lt;/div&gt;&lt;!-- [DocumentBodyEnd:d99d04d3-34d4-4915-b4fc-1bd8ffcc517a] --&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/5yCftaHceLk" height="1" width="1" alt=""/&gt;</content><summary>One of the latest and most innovative releases of our community has certainly been Quarkus. The project was published just a few months ago and it’s not surprising that it is now the topic of many materials being released in the few weeks. But especially this week, we are lucky not to have just another article or blog post, but several video presentations all discussing using Quarkus in very diffe...</summary><dc:creator>Romain Pelisse</dc:creator><dc:date>2019-08-02T09:45:54Z</dc:date><feedburner:origLink>https://developer.jboss.org/blogs/weekly-editorial/2019/08/02/this-week-in-jboss-august-2th-2019-live-with-quarkus</feedburner:origLink></entry><entry><title>How to configure LDAP user authentication and RBAC in Red Hat OpenShift 3.11</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/seC9RgGBcEU/" /><category term="devops" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="ldap" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><category term="rbac" scheme="searchisko:content:tags" /><category term="Red Hat OpenShift" scheme="searchisko:content:tags" /><category term="Red Hat OpenShift Container Platform" scheme="searchisko:content:tags" /><author><name>mohammad ahmad</name></author><id>searchisko:content:id:jbossorg_blog-how_to_configure_ldap_user_authentication_and_rbac_in_red_hat_openshift_3_11</id><updated>2019-08-02T07:00:25Z</updated><published>2019-08-02T07:00:25Z</published><content type="html">&lt;p&gt;In this article, I demonstrate a systematic method to configure LDAP user and group synchronization in &lt;a href="http://developers.redhat.com/openshift/"&gt;Red Hat OpenShift&lt;/a&gt;, as well as OpenShift role-based access control (RBAC) for these LDAP users and groups. Following these steps makes the management of your LDAP users and groups within OpenShift much easier. I achieve this goal by demonstrating:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;How to validate your &lt;code&gt;ldap&lt;/code&gt; parameters with &lt;code&gt;ldaptool&lt;/code&gt; prior to installing OpenShift.&lt;/li&gt; &lt;li&gt;How to enable LDAP authentication in OpenShift for specific LDAP groups and organization units.&lt;/li&gt; &lt;li&gt;The scripts and commands that let you synchronize members of your LDAP groups to OpenShift, which in turn lets you apply custom OpenShift RBAC rules on specific users or groups.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;span id="more-607377"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;My assumptions&lt;/h2&gt; &lt;p&gt;For the purpose of this article, I assume the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;You have a working LDAP service.&lt;/li&gt; &lt;li&gt;The only two LDAP groups allowed to authenticate to your OpenShift environment are &lt;code&gt;ocp-cluster-admins&lt;/code&gt; and &lt;code&gt;ocp-cluster-users&lt;/code&gt; and are associated with &lt;code&gt;ou=OPENSHIFT&lt;/code&gt; in your ldap tree.&lt;/li&gt; &lt;li&gt;You have assigned &lt;code&gt;ocp-cluster-admins&lt;/code&gt; to user &lt;code&gt;ocpadminuser1&lt;/code&gt;, and &lt;code&gt;ocp-cluster-users&lt;/code&gt; to user &lt;code&gt;ocpuser1.&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;This article shows one of the many ways to configure LDAP for OpenShift. Because different users in &lt;code&gt;ocp-cluster-users&lt;/code&gt; will have different roles within your Red Hat OpenShift environment, this task can be automated or centrally managed, but that process will not be discussed in detail here.&lt;/p&gt; &lt;p&gt;Note that this article deliberately uses mixed cases (upper- and lowercase) in various sections to demonstrate case sensitivity within OpenShift versus LDAP. However, if you wish to minimize problems with OpenShift&amp;#8217;s case sensitivity, stick to lowercase for everything.&lt;/p&gt; &lt;h2&gt;LDAP details&lt;/h2&gt; &lt;p&gt;Identify all of your LDAP details prior to commencing your OpenShift installation. For this article, I use the following details:&lt;/p&gt; &lt;pre&gt;ldap hostname: myldap.mydomain ldap bind dn: CN=OPENSHIFT-BU,ou=users,o=MyOrg ldap bind password: mypassword ldap ocp admins group DN: cn=ocp-cluster-admins,ou=OPENSHIFT,o=MyOrg ldap ocp users group DN: cn=ocp-cluster-users,ou=OPENSHIFT,o=MyOrg&lt;/pre&gt; &lt;p&gt;Ideally, all your secret credentials should be managed via &lt;a href="https://docs.ansible.com/ansible/latest/user_guide/vault.html"&gt;Red Hat Ansible Vault&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;LDAP parameter and credential testing&lt;/h2&gt; &lt;p&gt;For your tests to provide reliable results, confirm you have users in both groups. Before defining the OpenShift inventory parameters and the scripts used to synchronize &lt;code&gt;ldap&lt;/code&gt; groups, it is important to ensure all of your &lt;code&gt;ldap&lt;/code&gt; settings are correct, independent of OpenShift.&lt;/p&gt; &lt;p&gt;I tested my &lt;code&gt;ldap&lt;/code&gt; connection with the details mentioned in the previous section using &lt;code&gt;ldapsearch&lt;/code&gt;, and I also wanted to make sure that I could see the users in my groups, as this is what OpenShift will be seeing:&lt;/p&gt; &lt;pre&gt;$ ldapsearch -x -LLL -D "CN=OPENSHIFT-BU,ou=users,o=MyOrg" -w mypassword -H ldap://myldap.mydomain:389 -b ou=users,o=MyOrg -s sub "(|(memberof=cn=ocp-cluster-admins,ou=OPENSHIFT,o=MyOrg)(memberof=cn=ocp-cluster-users,ou=OPENSHIFT,o=MyOrg))" "CN" dn: cn=ocp-cluster-admins,ou=OPENSHIFT,o=MyOrg CN: adminuser1 dn: cn=ocp-cluster-users,ou=OPENSHIFT,o=MyOrg CN: ocpuser1&lt;/pre&gt; &lt;p&gt;After that, it is important to identify what &lt;code&gt;ldap&lt;/code&gt; fields are listed when you perform an &lt;code&gt;ldap&lt;/code&gt; search for one of your users (e.g., &lt;code&gt;ocpuser1&lt;/code&gt;):&lt;/p&gt; &lt;pre&gt;$ ldapsearch -x -LLL -h myldap.mydomain -D "CN=OPENSHIFT-BU,ou=users,o=MyOrg" -w mypassword -b "ou=users,o=MyOrg" -s sub "cn=ocpuser1" &lt;strong&gt;dn&lt;/strong&gt;: CN=ocpuser1,ou=users,o=MyOrg groupMembership: cn=ocp-cluster-users,ou=OPENSHIFT,o=MyOrg &lt;strong&gt;UID&lt;/strong&gt;: myuid DESCRIPTION: OpenShift Cluster User 1 SN: ocpuser1 OBJECTCLASS: top OBJECTCLASS: person &lt;strong&gt;cn&lt;/strong&gt;: ocpuser1&lt;/pre&gt; &lt;p&gt;Note that these values can be different based on your LDAP schema and design. In this case, the attributes of interest are &lt;code&gt;DN&lt;/code&gt;, &lt;code&gt;UID&lt;/code&gt;, and &lt;code&gt;CN&lt;/code&gt;.&lt;/p&gt; &lt;h2&gt;Red Hat OpenShift inventory parameters&lt;/h2&gt; &lt;p&gt;Reference:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://docs.openshift.com/container-platform/3.11/install_config/configuring_authentication.html#LDAPPasswordIdentityProvider"&gt;Configuring authentication with LDAP&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;I personally find LDAP connection information in OpenShift inventories very confusing. Here, I deconstruct it for clarity (notice the &amp;#8220;attributes&amp;#8221; section below):&lt;/p&gt; &lt;pre&gt;openshift_master_identity_providers=[ { 'name': 'myldap', 'challenge': 'true', 'login': 'true', 'kind': 'LDAPPasswordIdentityProvider', 'attributes': {'DN' : ['DN'], 'UID': ['UID'], 'CN': ['CN']}, 'bindDN': 'CN=OPENSHIFT-BU,ou=users,o=MyOrg', 'bindPassword': 'mypassword', 'ca': '', 'insecure': 'true', 'url': 'ldap://myldap.mydomain:389/ou=users,o=MyOrg?CN?? (| (memberof=cn=ocp-cluster-admins,ou=OPENSHIFT,o=MyOrg) (memberof=cn=ocp-cluster-users,ou=OPENSHIFT,o=MyOrg) )' } ] &lt;/pre&gt; &lt;p&gt;Then, once I have all my details clear, I remove all of the new lines and unnecessary spaces. The code becomes:&lt;/p&gt; &lt;pre&gt;openshift_master_identity_providers=[{'name': 'myldap', 'challenge': 'true', 'login': 'true', 'kind': 'LDAPPasswordIdentityProvider', 'attributes': {'DN' : ['DN'], 'UID': ['UID'], 'CN': ['CN']}, 'bindDN': 'CN=OPENSHIFT-BU,ou=users,o=MyOrg', 'bindPassword': 'mypassword', 'ca': '', 'insecure': 'true', 'url': 'ldap://myldap.mydomain:389/ou=users,o=MyOrg?CN??(|(memberof=cn=ocp-cluster-admins,ou=OPENSHIFT,o=MyOrg)(memberof=cn=ocp-cluster-users,ou=OPENSHIFT,o=MyOrg))'}]&lt;/pre&gt; &lt;p&gt;If you wish to add &lt;code&gt;htpasswd&lt;/code&gt; authentication for contingency (for example, just to have a local admin user), include it as another identity provider. For example:&lt;/p&gt; &lt;pre&gt;openshift_master_identity_providers=[{htpasswd fileds},{ldap fields}] &lt;/pre&gt; &lt;h2&gt;Red Hat OpenShift post-install configuration&lt;/h2&gt; &lt;p&gt;Once installation completes, &lt;code&gt;ldap&lt;/code&gt; users in the groups identified earlier can authenticate to the master API (with the &lt;code&gt;oc login&lt;/code&gt; command) but will not have any access by default. If you want your users to have proper role based access, you will need to perform two steps. The first is synchronizing LDAP groups to OpenShift groups. This task needs to be done periodically, or every time a new user is added to &lt;code&gt;ldap&lt;/code&gt; (either via &lt;code&gt;crontab&lt;/code&gt; or a CI/CD pipeline). Doing so allows Red Hat OpenShift to see the LDAP groups and users as its own users.&lt;/p&gt; &lt;p&gt;Second, RBAC rules need to be granted to OpenShift groups or users, synchronized from &lt;code&gt;ldap&lt;/code&gt;. I demonstrate this manually, but ideally, you should automate this process.&lt;/p&gt; &lt;h3&gt;Step 1: Synchronize &lt;code&gt;ldap&lt;/code&gt; groups&lt;/h3&gt; &lt;p&gt;Reference:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://docs.openshift.com/container-platform/3.11/install_config/syncing_groups_with_ldap.html" target="_blank" rel="noopener noreferrer"&gt;Syncing groups with LDAP&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Create the file &lt;code&gt;/root/ldap_group_sync.yml&lt;/code&gt; on your master node with the following content (the comments are not part of the file, but instead are there for elaboration):&lt;/p&gt; &lt;pre&gt;# LDAP is case insensitive, but OpenShift is not, so all LDAP parameters have been converted to lower case as per https://access.redhat.com/solutions/3232051 (under "Case Sensitivity") kind: LDAPSyncConfig apiVersion: v1 url: ldap://myldapserver:389 insecure: true ca: "" bindDN: "cn=openshift-bu,ou=users,o=MyOrg" bindPassword: "mypassword" rfc2307: groupsQuery: baseDN: "ou=openshift,o=MyOrg" scope: sub filter: (|(cn=ocp-cluster-admins)(cn=ocp-cluster-users)) derefAliases: never timeout: 0 pageSize: 0 groupUIDAttribute: dn groupNameAttributes: [ cn ] groupMembershipAttributes: [ member ] usersQuery: basedn: "ou=users,o=MyOrg" scope: sub derefAliases: never pageSize: 0 userUIDAttribute: dn userNameAttributes: [ cn ] tolerateMemberNotFoundErrors: true tolerateMemberOutOfScopeErrors: true &lt;/pre&gt; &lt;p&gt;Run a test:&lt;/p&gt; &lt;pre&gt;[root@master ~]# oc adm groups sync --sync-config=/root/ldap_groups.yml apiVersion: v1 items: - apiVersion: user.openshift.io/v1 kind: Group metadata: annotations: openshift.io/ldap.sync-time: 2019-07-21T07:16:1101000 openshift.io/ldap.uid: cn=ocp-cluster-admins,OU=OPENSHIFT,o=MyOrg openshift.io/ldap.url: myldapserver:389 creationTimestamp: null labels: openshift.io/ldap.host: myldapserver name: ocp-cluster-admins users: - ocpadminuser1 - apiVersion: user.openshift.io/v1 kind: Group metadata: annotations: openshift.io/ldap.sync-time: 2019-07-21T07:16:1101000 openshift.io/ldap.uid: cn=ocp-cluster-users,OU=OPENSHIFT,o=MyOrg openshift.io/ldap.url: myldapserver:389 creationTimestamp: null labels: openshift.io/ldap.host: myldapserver name: ocp-cluster-users users: - ocpuser1 kind: List metadata: {} &lt;/pre&gt; &lt;p&gt;If you get the following error, you can &lt;a href="https://access.redhat.com/solutions/3232051" target="_blank" rel="noopener noreferrer"&gt;find the fix here&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;For group ignoring member search for entry with dn would search outside of the base dn specified &lt;/pre&gt; &lt;p&gt;If you run the command above, this will only be a dry run. To ensure it actually performs the user and group synchronization, add &lt;code&gt;--confirm&lt;/code&gt; to the end:&lt;/p&gt; &lt;pre&gt;[root@master ~]# oc adm groups sync --sync-config=/root/ldap_groups.yml --confirm group/ocp-cluster-admins group/ocp-cluster-users&lt;/pre&gt; &lt;p&gt;Now, check to see your groups:&lt;/p&gt; &lt;pre&gt;# oc get groups NAME USERS ocp-cluster-admins ocpadminuser1 ocp-cluster-users ocpuser1 &lt;/pre&gt; &lt;h3&gt;Step 2: Create custom OpenShift RBAC rules for synchronized LDAP users and groups&lt;/h3&gt; &lt;p&gt;Ideally, you should automate and centrally manage this process. One of the many ways to automate the assignment of roles for all your different users would be via &lt;a href="https://www.redhat.com/en/technologies/management/ansible" target="_blank" rel="noopener noreferrer"&gt;Red Hat Ansible&lt;/a&gt;. However, because we have only two users, doing this manually is not too painful. I want my &lt;code&gt;ocp-cluster-admins&lt;/code&gt; group to have the &lt;code&gt;cluster-admin&lt;/code&gt; role, and my &lt;code&gt;ocp-cluster-users&lt;/code&gt; to have the project edit role:&lt;/p&gt; &lt;pre&gt;root@master ~]# oc adm policy add-cluster-role-to-group cluster-admin ocp-cluster-admins role "cluster-admin" added: "ocp-cluster-admins" [root@master ~]# oc adm policy add-role-to-group edit ocp-cluster-users role "edit" added: "ocp-cluster-users"&lt;/pre&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;To ensure you have a relatively smooth experience with OpenShift RBAC for your LDAP groups and users, validate all your LDAP details with &lt;code&gt;ldaptool&lt;/code&gt;. Additionally, it is best to adopt the lower case for all your parameters (except passwords) to avoid future problems caused by differing case-sensitivity between systems (e.g., &lt;code&gt;ldap&lt;/code&gt; vs. OpenShift). Finally, automation of roles for different users is the best way forward.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F02%2Fhow-to-configure-ldap-user-authentication-and-rbac-in-red-hat-openshift-3-11%2F&amp;#38;linkname=How%20to%20configure%20LDAP%20user%20authentication%20and%20RBAC%20in%20Red%20Hat%20OpenShift%203.11" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F02%2Fhow-to-configure-ldap-user-authentication-and-rbac-in-red-hat-openshift-3-11%2F&amp;#38;linkname=How%20to%20configure%20LDAP%20user%20authentication%20and%20RBAC%20in%20Red%20Hat%20OpenShift%203.11" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F02%2Fhow-to-configure-ldap-user-authentication-and-rbac-in-red-hat-openshift-3-11%2F&amp;#38;linkname=How%20to%20configure%20LDAP%20user%20authentication%20and%20RBAC%20in%20Red%20Hat%20OpenShift%203.11" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F02%2Fhow-to-configure-ldap-user-authentication-and-rbac-in-red-hat-openshift-3-11%2F&amp;#38;linkname=How%20to%20configure%20LDAP%20user%20authentication%20and%20RBAC%20in%20Red%20Hat%20OpenShift%203.11" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F02%2Fhow-to-configure-ldap-user-authentication-and-rbac-in-red-hat-openshift-3-11%2F&amp;#38;linkname=How%20to%20configure%20LDAP%20user%20authentication%20and%20RBAC%20in%20Red%20Hat%20OpenShift%203.11" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F02%2Fhow-to-configure-ldap-user-authentication-and-rbac-in-red-hat-openshift-3-11%2F&amp;#38;linkname=How%20to%20configure%20LDAP%20user%20authentication%20and%20RBAC%20in%20Red%20Hat%20OpenShift%203.11" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F02%2Fhow-to-configure-ldap-user-authentication-and-rbac-in-red-hat-openshift-3-11%2F&amp;#38;linkname=How%20to%20configure%20LDAP%20user%20authentication%20and%20RBAC%20in%20Red%20Hat%20OpenShift%203.11" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F02%2Fhow-to-configure-ldap-user-authentication-and-rbac-in-red-hat-openshift-3-11%2F&amp;#038;title=How%20to%20configure%20LDAP%20user%20authentication%20and%20RBAC%20in%20Red%20Hat%20OpenShift%203.11" data-a2a-url="https://developers.redhat.com/blog/2019/08/02/how-to-configure-ldap-user-authentication-and-rbac-in-red-hat-openshift-3-11/" data-a2a-title="How to configure LDAP user authentication and RBAC in Red Hat OpenShift 3.11"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/08/02/how-to-configure-ldap-user-authentication-and-rbac-in-red-hat-openshift-3-11/"&gt;How to configure LDAP user authentication and RBAC in Red Hat OpenShift 3.11&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/seC9RgGBcEU" height="1" width="1" alt=""/&gt;</content><summary>In this article, I demonstrate a systematic method to configure LDAP user and group synchronization in Red Hat OpenShift, as well as OpenShift role-based access control (RBAC) for these LDAP users and groups. Following these steps makes the management of your LDAP users and groups within OpenShift much easier. I achieve this goal by demonstrating: How to validate your ldap parameters with ldaptool...</summary><dc:creator>mohammad ahmad</dc:creator><dc:date>2019-08-02T07:00:25Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/08/02/how-to-configure-ldap-user-authentication-and-rbac-in-red-hat-openshift-3-11/</feedburner:origLink></entry><entry><title>Using Let’s Encrypt with Apache httpd on Red Hat Enterprise Linux 7</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/glqRfb1edvc/" /><category term="certificate" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="linux" scheme="searchisko:content:tags" /><category term="open source" scheme="searchisko:content:tags" /><category term="Red Hat Enterprise Linux" scheme="searchisko:content:tags" /><category term="Red Hat Software Collections" scheme="searchisko:content:tags" /><category term="rhel" scheme="searchisko:content:tags" /><category term="RHEL7" scheme="searchisko:content:tags" /><category term="security" scheme="searchisko:content:tags" /><category term="ssl" scheme="searchisko:content:tags" /><author><name>Joe Orton</name></author><id>searchisko:content:id:jbossorg_blog-using_let_s_encrypt_with_apache_httpd_on_red_hat_enterprise_linux_7</id><updated>2019-08-02T07:00:22Z</updated><published>2019-08-02T07:00:22Z</published><content type="html">&lt;p&gt;Getting an SSL certificate for your web server has traditionally been a something of an effort.  You need to correctly generate a weird thing called a certificate signing request (CSR), submit it to the web page of your chosen Certificate Authority (CA), wait for them to sign and generate a certificate, work out where to put the certificate to configure it for your web server—making sure you also configure any required &lt;em&gt;intermediate CA certificates&lt;/em&gt;—and then restart the web server.  If you got all that right, you then need to enter a calendar entry so you&amp;#8217;ll remember to go through the process again in (say) a year&amp;#8217;s time. Even &lt;a href="https://www.pcworld.com/article/2906216/expired-google-certificate-temporarily-disrupts-gmail-service.html"&gt;some of the biggest names in IT can mess up this process&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;With new CAs like &lt;a href="https://letsencrypt.org/"&gt;Let&amp;#8217;s Encrypt&lt;/a&gt;, along with some supporting software, the rigmarole around SSL certificates becomes a thing of the past.  The technology behind this revolution is Automatic Certificate Management Environment (ACME), a &lt;a href="https://tools.ietf.org/html/rfc8555"&gt;new IETF standard (RFC 8555)&lt;/a&gt; client/server protocol which allows TLS certificates to be automatically obtained, deployed, and renewed. In this protocol, an &amp;#8220;agent&amp;#8221; running on the server that needs an SSL certificate will talk to to the CA&amp;#8217;s ACME server over HTTP.&lt;/p&gt; &lt;p&gt;A popular method for using ACME on your Red Hat Enterprise Linux 7 server is &lt;em&gt;certbot&lt;/em&gt;. Certbot is a standalone ACME agent that is configured out-of-the-box to work with Let&amp;#8217;s Encrypt and can work with Apache httpd, Nginx, and a wide variety of other web (and non-web!) servers.  The certbot authors have an excellent &lt;a href="https://certbot.eff.org/lets-encrypt/centosrhel7-apache.html"&gt;guide describing how to set up certbot with httpd on RHEL7&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;In this tutorial, I&amp;#8217;ll show an alternative method—the &lt;em&gt;mod_md &lt;/em&gt;module—which is an ACME agent implemented as a module for Apache httpd, tightly integrated with mod_ssl, and is supported today in Red Hat Enterprise Linux 7.  The mod_md module was implemented by &lt;a href="https://twitter.com/icing"&gt;Stefan Eissing&lt;/a&gt;—a prolific developer who also added HTTP/2 support to httpd—and contributed to the Apache Software Foundation, becoming a standard part of any new installation since httpd version 2.4.30.&lt;/p&gt; &lt;p&gt;&lt;span id="more-615287"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;Installation&lt;/h2&gt; &lt;p&gt;I&amp;#8217;m using a virtual machine running Red Hat Enterprise Linux 7 in Amazon EC2, and to get going I&amp;#8217;ll install Apache httpd from the &lt;a href="https://developers.redhat.com/products/softwarecollections/overview?extIdCarryOver=true&amp;#38;intcmp=701f20000012i8UAAQ&amp;#38;sc_cid=701f2000000RtqCAAS"&gt;Red Hat Software Collections&lt;/a&gt; repository:&lt;/p&gt; &lt;pre&gt;# &lt;strong&gt;yum-config-manager --enable rhui-REGION-rhel-server-rhscl &amp;#62; /dev/null&lt;/strong&gt; # &lt;strong&gt;yum install -y httpd24 httpd24-mod_ssl httpd24-mod_md ... &lt;/strong&gt;Installed: httpd24.x86_64 0:1.1-18.el7 httpd24-mod_md.x86_64 0:2.4.34-7.el7.1 httpd24-mod_ssl.x86_64 1:2.4.34-7.el7.1 Dependency Installed: httpd24-httpd.x86_64 0:2.4.34-7.el7.1 httpd24-httpd-tools.x86_64 0:2.4.34-7.el7.1 httpd24-libcurl.x86_64 0:7.61.1-2.el7 httpd24-libnghttp2.x86_64 0:1.7.1-7.el7 httpd24-runtime.x86_64 0:1.1-18.el7 Complete! #&lt;/pre&gt; &lt;p&gt;The Software Collections repository is not enabled by default, so the first step is to enable it.  Note that &lt;code&gt;mod_md&lt;/code&gt; is installed just like any other httpd module from the &lt;code&gt;httpd24&lt;/code&gt; collection.&lt;/p&gt; &lt;h2&gt;Configuration&lt;/h2&gt; &lt;p&gt;Now, to configure the server.  The minimal changes are required in the SSL configuration &lt;code&gt;/opt/rh/httpd24/root/etc/httpd/conf.d/ssl.conf&lt;/code&gt;, so fire up your editor and adjust the default configuration as follows:&lt;/p&gt; &lt;pre&gt;&lt;strong&gt;MDomain mytestsslserver.site ServerAdmin jorton@redhat.com &lt;/strong&gt; &amp;#60;VirtualHost _default:443&amp;#62; # General setup for the virtual host, inherited from global configuration #DocumentRoot "/var/www/html" ServerName &lt;strong&gt;mytestsslserver.site:443&lt;/strong&gt; ... &lt;strong&gt;#SSLCertificateFile&lt;/strong&gt; /etc/pki/tls/certs/localhost.crt ... &lt;strong&gt;#SSLCertificateKeyFile&lt;/strong&gt; /etc/pki/tls/private/localhost.key&lt;/pre&gt; &lt;p&gt;Since &lt;code&gt;mod_md&lt;/code&gt; is going to manage the certificates for this virtual host, &lt;code&gt;SSLCertificateFile&lt;/code&gt; and &lt;code&gt;SSLCertificateKeyFile&lt;/code&gt; must be either removed or commented out. I&amp;#8217;ve also added &lt;code&gt;MDomain&lt;/code&gt; to tell &lt;code&gt;mod_md&lt;/code&gt; to manage the domain, which must match the name used in the &lt;code&gt;VirtualHost&lt;/code&gt;, and added my email address in &lt;code&gt;ServerAdmin&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;If we now start up the server, we should get some errors from mod_md:&lt;/p&gt; &lt;pre&gt;# &lt;strong&gt;systemctl start httpd24-httpd&lt;/strong&gt; # &lt;strong&gt;tail -4 /var/log/httpd24/error_log&lt;/strong&gt; [Mon Jul 22 10:05:09.679997 2019] [mpm_prefork:notice] [pid 5395] AH00163: Apache/2.4.34 (Red Hat) OpenSSL/1.0.2k-fips configured -- resuming normal operations [Mon Jul 22 10:05:09.680018 2019] [core:notice] [pid 5395] AH00094: Command line: '/opt/rh/httpd24/root/usr/sbin/httpd -D FOREGROUND' [Mon Jul 22 10:05:11.083123 2019] [md:error] [pid 5397] (70008)Partial results are valid but processing is incomplete: mytestsslserver.site: the CA requires you to accept the terms-of-service as specified in &amp;#60;https://letsencrypt.org/documents/LE-SA-v1.2-November-15-2017.pdf&amp;#62;. Please read the document that you find at that URL and, if you agree to the conditions, configure "MDCertificateAgreement url" with exactly that URL in your Apache. Then (graceful) restart the server to activate. [Mon Jul 22 10:05:11.083160 2019] [md:error] [pid 5397] (70008)Partial results are valid but processing is incomplete: AH10056: processing mytestsslserver.site&lt;/pre&gt; &lt;p&gt;&lt;code&gt;mod_md&lt;/code&gt; uses the Let&amp;#8217;s Encrypt service by default—but if you configure a different ACME server via the &lt;a href="https://httpd.apache.org/docs/2.4/mod/mod_md.html#mdcertificateauthority"&gt;&lt;code&gt;MDCertificateAuthority&lt;/code&gt; directive&lt;/a&gt;, you&amp;#8217;ll get a different error message here.  After reading the terms of service for your CA, indicate acceptance via the &lt;code&gt;MDCertificateAgreement&lt;/code&gt; directive—edit &lt;code&gt;/opt/rh/httpd24/root/etc/httpd/conf.d/ssl.conf&lt;/code&gt; one more time:&lt;/p&gt; &lt;pre&gt;MDomain mytestsslserver.site &lt;strong&gt;MDCertificateAgreement https://letsencrypt.org/documents/LE-SA-v1.2-November-15-2017.pdf &lt;/strong&gt;ServerAdmin jorton@redhat.com &lt;/pre&gt; &lt;p&gt;If you&amp;#8217;d read the terms of service already, you can add the directive to start with and skip a reload.  I now restart the server two more times, allowing a short delay for certificate issuance to take place:&lt;/p&gt; &lt;pre&gt;# &lt;strong&gt;systemctl reload httpd24-httpd&lt;/strong&gt; # &lt;strong&gt;sleep 60&lt;/strong&gt; # &lt;strong&gt;tail -1 /var/log/httpd24/error_log &lt;/strong&gt; [Mon Jul 22 10:08:19.344969 2019] [md:notice] [pid 5480] AH10059: The Managed Domain mytestsslserver.site has been setup and changes will be activated on next (graceful) server restart. # &lt;strong&gt;systemctl reload httpd24-httpd &lt;/strong&gt;# &lt;strong&gt;tail -1 /var/log/httpd24/ssl_error_log&lt;/strong&gt; [Mon Jul 22 10:09:00.341603 2019] [ssl:info] [pid 5395] AH02568: Certificate and private key mytestsslserver.site:443:0 configured from /opt/rh/httpd24/root/etc/httpd/state/md/domains/mytestsslserver.site/pubcert.pem and /opt/rh/httpd24/root/etc/httpd/state/md/domains/mytestsslserver.site/privkey.pem&lt;/pre&gt; &lt;p&gt;Bingo! That last message tells us that &lt;code&gt;mod_md&lt;/code&gt; has provided the SSL certificate and private key for the virtual host. I can now load my new SSL site via &lt;a href="https://mytestsslserver.site/"&gt;https://mytestsslserver.site/&lt;/a&gt; and get the familiar RHEL &amp;#8220;welcome&amp;#8221; page, and start adding actual content to &lt;code&gt;/opt/rh/httpd24/root/var/www/html/&lt;/code&gt;.&lt;/p&gt; &lt;h2&gt;More information&lt;/h2&gt; &lt;p&gt;In the current generation of the ACME protocol, the Let&amp;#8217;s Encrypt servers will use an SSL request to this httpd server to confirm that I am the owner of the domain for which I&amp;#8217;m requesting an SSL certificate.  I can see this in the logs here:&lt;/p&gt; &lt;pre&gt;# &lt;strong&gt;tail /var/log/httpd24/access_log&lt;/strong&gt; 66.133.109.36 - - [22/Jul/2019:10:08:17 +0000] "GET /.well-known/acme-challenge/z2xetCt0LMwehxmGUerh9GFdkg9aqlIXAPWRb_8PEJg HTTP/1.1" 200 87 "-" "Mozilla/5.0 (compatible; Let's Encrypt validation server; +https://www.letsencrypt.org)"&lt;/pre&gt; &lt;p&gt;For this challenge/response exchange to work, your SSL server must be accessible—not firewalled—via port 443 on a public network.  That means you can&amp;#8217;t use this configuration for private, internal servers.  There are ways around this, notably DNS challenge validation, which are available in certbot and also in future versions of mod_md, but those require a more complex configuration.&lt;/p&gt; &lt;p&gt;For more information on using &lt;code&gt;mod_md&lt;/code&gt;, you can &lt;a href="https://httpd.apache.org/docs/2.4/mod/mod_md.html"&gt;read the upstream documentation&lt;/a&gt;. For more information on getting started with Red Hat Software Collections, &lt;a href="https://access.redhat.com/documentation/en-us/red_hat_software_collections/3/html/3.2_release_notes/chap-installation#sect-Installation-Subscribe"&gt;see the release notes&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F02%2Fusing-lets-encrypt-with-apache-httpd-on-red-hat-enterprise-linux-7%2F&amp;#38;linkname=Using%20Let%E2%80%99s%20Encrypt%20with%20Apache%20httpd%20on%20Red%20Hat%20Enterprise%20Linux%207" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F02%2Fusing-lets-encrypt-with-apache-httpd-on-red-hat-enterprise-linux-7%2F&amp;#38;linkname=Using%20Let%E2%80%99s%20Encrypt%20with%20Apache%20httpd%20on%20Red%20Hat%20Enterprise%20Linux%207" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F02%2Fusing-lets-encrypt-with-apache-httpd-on-red-hat-enterprise-linux-7%2F&amp;#38;linkname=Using%20Let%E2%80%99s%20Encrypt%20with%20Apache%20httpd%20on%20Red%20Hat%20Enterprise%20Linux%207" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F02%2Fusing-lets-encrypt-with-apache-httpd-on-red-hat-enterprise-linux-7%2F&amp;#38;linkname=Using%20Let%E2%80%99s%20Encrypt%20with%20Apache%20httpd%20on%20Red%20Hat%20Enterprise%20Linux%207" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F02%2Fusing-lets-encrypt-with-apache-httpd-on-red-hat-enterprise-linux-7%2F&amp;#38;linkname=Using%20Let%E2%80%99s%20Encrypt%20with%20Apache%20httpd%20on%20Red%20Hat%20Enterprise%20Linux%207" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F02%2Fusing-lets-encrypt-with-apache-httpd-on-red-hat-enterprise-linux-7%2F&amp;#38;linkname=Using%20Let%E2%80%99s%20Encrypt%20with%20Apache%20httpd%20on%20Red%20Hat%20Enterprise%20Linux%207" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F02%2Fusing-lets-encrypt-with-apache-httpd-on-red-hat-enterprise-linux-7%2F&amp;#38;linkname=Using%20Let%E2%80%99s%20Encrypt%20with%20Apache%20httpd%20on%20Red%20Hat%20Enterprise%20Linux%207" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F02%2Fusing-lets-encrypt-with-apache-httpd-on-red-hat-enterprise-linux-7%2F&amp;#038;title=Using%20Let%E2%80%99s%20Encrypt%20with%20Apache%20httpd%20on%20Red%20Hat%20Enterprise%20Linux%207" data-a2a-url="https://developers.redhat.com/blog/2019/08/02/using-lets-encrypt-with-apache-httpd-on-red-hat-enterprise-linux-7/" data-a2a-title="Using Let’s Encrypt with Apache httpd on Red Hat Enterprise Linux 7"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/08/02/using-lets-encrypt-with-apache-httpd-on-red-hat-enterprise-linux-7/"&gt;Using Let&amp;#8217;s Encrypt with Apache httpd on Red Hat Enterprise Linux 7&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/glqRfb1edvc" height="1" width="1" alt=""/&gt;</content><summary>Getting an SSL certificate for your web server has traditionally been a something of an effort.  You need to correctly generate a weird thing called a certificate signing request (CSR), submit it to the web page of your chosen Certificate Authority (CA), wait for them to sign and generate a certificate, work out where to put the certificate to configure it for your web server—making sure you also ...</summary><dc:creator>Joe Orton</dc:creator><dc:date>2019-08-02T07:00:22Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/08/02/using-lets-encrypt-with-apache-httpd-on-red-hat-enterprise-linux-7/</feedburner:origLink></entry><entry><title>How the GNU C Library handles backward compatibility</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/TQYaTNUpzHE/" /><category term="C" scheme="searchisko:content:tags" /><category term="Developer Tools" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="glibc" scheme="searchisko:content:tags" /><category term="gnu" scheme="searchisko:content:tags" /><category term="Red Hat Developer Toolset" scheme="searchisko:content:tags" /><author><name>DJ Delorie</name></author><id>searchisko:content:id:jbossorg_blog-how_the_gnu_c_library_handles_backward_compatibility</id><updated>2019-08-01T07:00:47Z</updated><published>2019-08-01T07:00:47Z</published><content type="html">&lt;p&gt;One of the GNU C Library&amp;#8217;s (glibc&amp;#8217;s) unwritten rules is that a program built against an old version of &lt;a href="https://www.gnu.org/software/libc/"&gt;glibc&lt;/a&gt; will continue to work against newer versions of glibc. But how does this work? What hidden magic lets you call the same function with different results, just based on when you built your program?&lt;span id="more-614557"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;Add magical symbols&lt;/h2&gt; &lt;p&gt;This magic is called &amp;#8220;compat symbols,&amp;#8221; which lets glibc and the static linker (the one used at build time) select from one of many implementations of a function. For example, if we look at the 32-bit &lt;code&gt;libc-2.29.so&lt;/code&gt;&amp;#8216;s dynamic symbol table, we see three versions of the &lt;code&gt;glob64&lt;/code&gt; function (in 2017, the &lt;code&gt;glob&lt;/code&gt; function was changed to handle dangling symlinks differently, which would cause older programs to crash, but that&amp;#8217;s a different story):&lt;/p&gt; &lt;pre&gt;$ readelf --dyn-syms -W /lib/libc-2.29.so | grep glob64 411: 0012d0e0 7183 FUNC GLOBAL DEFAULT 14 glob64@GLIBC_2.1 412: 0012edb0 7183 FUNC GLOBAL DEFAULT 14 glob64@GLIBC_2.2 413: 000b69a0 7183 FUNC GLOBAL DEFAULT 14 glob64@@GLIBC_2.27 &lt;/pre&gt; &lt;p&gt;In your program, you only refer to &lt;code&gt;glob64()&lt;/code&gt;. The dynamic linker (the one invoked to start your program) searches for a symbol that starts with &lt;code&gt;glob64&lt;/code&gt; followed by &lt;code&gt;@@&lt;/code&gt; and something else. The &lt;code&gt;@@&lt;/code&gt; tells the dynamic linker that this version is the default version. In this case, the dynamic linker finds &lt;code&gt;glob64@@GLIBC_2.27&lt;/code&gt;, because that application binary interface (ABI) last changed in glibc 2.27. The linker replaces &lt;code&gt;@@&lt;/code&gt; with &lt;code&gt;@&lt;/code&gt; to make &lt;code&gt;glob64@GLIBC_2.27&lt;/code&gt;, which is stored in your program&amp;#8217;s dynamic symbol table.&lt;/p&gt; &lt;p&gt;If the dynamic linker doesn&amp;#8217;t find any &lt;code&gt;@@&lt;/code&gt; symbols, it looks for an unversioned symbol, as usual.&lt;/p&gt; &lt;p&gt;Next, when your program &lt;i&gt;runs&lt;/i&gt; the dynamic linker and sees the version numbers on all symbols, it links to the correspondingly versioned symbol, because the names now match. The only exception here is that the current version of each symbol still has &lt;code&gt;@@&lt;/code&gt; in the shared object, which is matched against &lt;code&gt;@&lt;/code&gt; in your program:&lt;/p&gt; &lt;pre&gt;$ readelf --dyn-syms -W myprog.x | grep glob64 2: 00000000 0 FUNC GLOBAL DEFAULT UND glob64@GLIBC_2.27 (2) &lt;/pre&gt; &lt;p&gt;Now consider the case where we&amp;#8217;ve built a program against version 2.26 of the C library. In that case, glibc&amp;#8217;s dynamic symbol table has something like this when you link against it:&lt;/p&gt; &lt;pre&gt; 411: 0012d0e0 7183 FUNC GLOBAL DEFAULT 14 glob64@GLIBC_2.1 412: 0012edb0 7183 FUNC GLOBAL DEFAULT 14 glob64@@GLIBC_2.2 &lt;/pre&gt; &lt;p&gt;Your program would select the GLIBC_2.2 version as the &amp;#8220;latest&amp;#8221; symbol, and would add &lt;code&gt;glob64@GLIBC_2.2&lt;/code&gt; in its dynamic symbol table.&lt;/p&gt; &lt;p&gt;If you run that build on a system with glibc 2.27, the dynamic linker sees that you&amp;#8217;ve built against version 2.2 of that symbol, and links you to version 2.2 &lt;i&gt;despite&lt;/i&gt; there being a newer version available.&lt;/p&gt; &lt;h2&gt;Change your ABI with compatibility&lt;/h2&gt; &lt;p&gt;Let us say you wanted to do something similar in your own library. Consider this example code:&lt;/p&gt; &lt;pre&gt;int lookup (int index) { . . . } &lt;/pre&gt; &lt;p&gt;After a few releases, you realize you want to pass a pointer to the thing you want to look up:&lt;/p&gt; &lt;pre&gt;int lookup (int index, void *data) { . . . } &lt;/pre&gt; &lt;p&gt;You can&amp;#8217;t have two copies of the same function in your library. You don&amp;#8217;t want to change the name of the function, so you write something like this:&lt;/p&gt; &lt;pre&gt;__asm__(".symver lookup_v2, lookup@@v2"); int lookup_v2 (int index, void *data) { . . . } __asm__(".symver lookup_v1, lookup@"); int lookup_v1 (int index) { . . . } &lt;/pre&gt; &lt;p&gt;We now have two differently named functions. The original code is now &lt;code&gt;lookup_v1&lt;/code&gt; and is set to version &lt;code&gt;@&lt;/code&gt;, which means &amp;#8220;no version tag, but not the default version.&amp;#8221; The dynamic symbol table has an entry &lt;code&gt;lookup&lt;/code&gt; for this symbol, which is what your older binaries expect.&lt;/p&gt; &lt;p&gt;The new function &lt;code&gt;lookup_v2&lt;/code&gt; is set to version &lt;code&gt;@@v2&lt;/code&gt;, where the &lt;code&gt;@@&lt;/code&gt; means it is the default for any newly-linked programs. If you link a program against the new library, an entry &lt;code&gt;lookup@v2&lt;/code&gt; (note &lt;i&gt;one&lt;/i&gt; &lt;code&gt;@&lt;/code&gt;) is added to its dynamic symbol table.&lt;/p&gt; &lt;p&gt;The last step here is to tell the static linker what versions you&amp;#8217;re using and what internal names to hide, using a version file like this one, which we will call &lt;code&gt;mylib.vers&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;v1 { local: lookup_v1; }; v2 { local: lookup_v2; }; &lt;/pre&gt; &lt;p&gt;You specify this version file to the static linker with the &lt;code&gt;--version-script&lt;/code&gt; option, like this:&lt;/p&gt; &lt;pre&gt; gcc . . . -Wl,--version-script,mylib.vers &lt;/pre&gt; &lt;p&gt;Note the &lt;code&gt;v1&lt;/code&gt; and &lt;code&gt;v2&lt;/code&gt; clauses corresponding to the versions we&amp;#8217;re using. We also use the &lt;code&gt;local&lt;/code&gt; command to &amp;#8220;hide&amp;#8221; our internal names for the functions that implement older versions. This practice makes the (for example) &lt;code&gt;lookup_v2&lt;/code&gt; symbol local in scope to your library, and not visible outside it.&lt;/p&gt; &lt;h2&gt;Plan ahead&lt;/h2&gt; &lt;p&gt;In the case of glibc, versioning was used from the beginning. You can do this, too, if you add a wildcard version to your version script, like this:&lt;/p&gt; &lt;pre&gt;v1 { *; }; &lt;/pre&gt; &lt;p&gt;This code sets the version for &lt;i&gt;all&lt;/i&gt; of your symbols that don&amp;#8217;t already have a specific version to &lt;code&gt;v1&lt;/code&gt;. Of course, you only want to do this before your first release, because versioning your symbols is itself an ABI change. Then, as you develop future versions of your library, you add more version clauses and list new symbols in those new clauses.&lt;/p&gt; &lt;h2&gt;Understand compatibility&amp;#8217;s limits&lt;/h2&gt; &lt;p&gt;Despite the long history of compatibility and its almost magical ability to keep old programs running, there is one scenario that compatibility can&amp;#8217;t solve. You can&amp;#8217;t run a new program on an old glibc. Well, that&amp;#8217;s not exactly true. You can build a new program that&amp;#8217;s intended to run on an old glibc if you have a copy of that old glibc and its headers around. The easiest way to do that is to install an older operating system that has the version of glibc you want, which is the typical advice of &amp;#8220;build on the oldest platform you want to support,&amp;#8221; possibly using a more modern toolset (gcc et al.), such as &lt;a href="https://developers.redhat.com/products/developertoolset/overview"&gt;Red Hat&amp;#8217;s Developer Toolset&lt;/a&gt;, which was created for this purpose. That way, the new program depends only on compatibility symbols that are available in that old glibc &lt;i&gt;and any newer glibc&lt;/i&gt;. Older glibcs cannot, of course, know the future.&lt;/p&gt; &lt;p&gt;Unless you can predict the future, in which case, please already have contacted me.&lt;/p&gt; &lt;h2&gt;Know your nits, picks, and caveats&lt;/h2&gt; &lt;p&gt;As this is a short article, a lot of details are glossed over. For example, the &lt;code&gt;@@&lt;/code&gt; syntax is merely a user-visible version of the executable and linkable format (ELF) structure&amp;#8217;s internals, which is beyond the scope of this piece.&lt;/p&gt; &lt;p&gt;Although it&amp;#8217;s possible for your program to link against two dynamically shared objects (DSOs) that use two different versions of the same symbol (i.e., those two DSOs were built against different glibc versions), such a situation is not supported. The glibc developers do their best to make it work anyway, but if it breaks, you get to keep both pieces.&lt;/p&gt; &lt;p&gt;Similarly, using &lt;code&gt;dlsym&lt;/code&gt; to look up symbols in glibc (or any other versioned DSO) can result in using a different version of the symbol than other DSOs you use, with the same caveats.&lt;/p&gt; &lt;h2&gt;Learn more&lt;/h2&gt; &lt;p&gt;Here are additional materials that may interest you:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://sourceware.org/binutils/docs-2.32/ld/VERSION.html" target="_blank" rel="noopener noreferrer"&gt;ld&amp;#8217;s VERSION command&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://sourceware.org/glibc/wiki/SymbolVersioning" target="_blank" rel="noopener noreferrer"&gt;glibc wiki: Symbol Versioning&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://akkadia.org/drepper/dsohowto.pdf" target="_blank" rel="noopener noreferrer"&gt;&amp;#8220;How To Write Shared Libraries&amp;#8221;&lt;/a&gt; by Ulrich Drepper, Dec. 2011&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F01%2Fhow-the-gnu-c-library-handles-backward-compatibility%2F&amp;#38;linkname=How%20the%20GNU%20C%20Library%20handles%20backward%20compatibility" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F01%2Fhow-the-gnu-c-library-handles-backward-compatibility%2F&amp;#38;linkname=How%20the%20GNU%20C%20Library%20handles%20backward%20compatibility" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F01%2Fhow-the-gnu-c-library-handles-backward-compatibility%2F&amp;#38;linkname=How%20the%20GNU%20C%20Library%20handles%20backward%20compatibility" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F01%2Fhow-the-gnu-c-library-handles-backward-compatibility%2F&amp;#38;linkname=How%20the%20GNU%20C%20Library%20handles%20backward%20compatibility" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F01%2Fhow-the-gnu-c-library-handles-backward-compatibility%2F&amp;#38;linkname=How%20the%20GNU%20C%20Library%20handles%20backward%20compatibility" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F01%2Fhow-the-gnu-c-library-handles-backward-compatibility%2F&amp;#38;linkname=How%20the%20GNU%20C%20Library%20handles%20backward%20compatibility" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F01%2Fhow-the-gnu-c-library-handles-backward-compatibility%2F&amp;#38;linkname=How%20the%20GNU%20C%20Library%20handles%20backward%20compatibility" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F01%2Fhow-the-gnu-c-library-handles-backward-compatibility%2F&amp;#038;title=How%20the%20GNU%20C%20Library%20handles%20backward%20compatibility" data-a2a-url="https://developers.redhat.com/blog/2019/08/01/how-the-gnu-c-library-handles-backward-compatibility/" data-a2a-title="How the GNU C Library handles backward compatibility"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/08/01/how-the-gnu-c-library-handles-backward-compatibility/"&gt;How the GNU C Library handles backward compatibility&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/TQYaTNUpzHE" height="1" width="1" alt=""/&gt;</content><summary>One of the GNU C Library’s (glibc’s) unwritten rules is that a program built against an old version of glibc will continue to work against newer versions of glibc. But how does this work? What hidden magic lets you call the same function with different results, just based on when you built your program? Add magical symbols This magic is called “compat symbols,” which lets glibc and the static link...</summary><dc:creator>DJ Delorie</dc:creator><dc:date>2019-08-01T07:00:47Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/08/01/how-the-gnu-c-library-handles-backward-compatibility/</feedburner:origLink></entry><entry><title>DevNation Live: Easily secure your cloud-native microservices with Keycloak</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/KSMqZOMmedY/" /><category term="cloud" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="keycloak" scheme="searchisko:content:tags" /><category term="microservices" scheme="searchisko:content:tags" /><category term="security" scheme="searchisko:content:tags" /><author><name>Editorial Team</name></author><id>searchisko:content:id:jbossorg_blog-devnation_live_easily_secure_your_cloud_native_microservices_with_keycloak</id><updated>2019-08-01T07:00:28Z</updated><published>2019-08-01T07:00:28Z</published><content type="html">&lt;p&gt;&lt;a href="https://developers.redhat.com/devnation/?page=0"&gt;DevNation Live tech talks&lt;/a&gt; are hosted by the Red Hat technologists who create our products. These sessions include real solutions and code and sample projects to help you get started. In this talk, you’ll learn about &lt;a href="https://www.keycloak.org/"&gt;Keycloak&lt;/a&gt; from &lt;a href="https://developers.redhat.com/videos/youtube/hLQk08YnGsM/"&gt;Sébastien Blanc&lt;/a&gt;, Principal Software Engineer at Red Hat.&lt;br /&gt; &lt;span id="more-613877"&gt;&lt;/span&gt;&lt;br /&gt; This tutorial will demonstrate how &lt;a href="https://developers.redhat.com/blog/2017/05/25/easily-secure-your-spring-boot-applications-with-keycloak/#more-432287"&gt;Keycloak&lt;/a&gt; can help you secure your microservices. Regardless of whether it’s a Node.js REST Endpoint, a PHP app, or a &lt;a href="https://developers.redhat.com/blog/2019/03/29/quarkus-why-compile-to-native/"&gt;Quarkus&lt;/a&gt; service, Keycloak is completely agnostic of the technology being used by your services. Learn how to obtain a JWT token and how to propagate this token between your different secured services. We will also explain how to add fine-grained authorizations to these services.&lt;/p&gt; &lt;p&gt;Watch the complete video:&lt;br /&gt; &lt;iframe src="https://www.youtube.com/embed/JvPBWPDQ940" width="560" height="315" frameborder="0" allowfullscreen="allowfullscreen"&gt;&lt;/iframe&gt;&lt;/p&gt; &lt;h3&gt;Learn more&lt;/h3&gt; &lt;p&gt;Join us at an upcoming &lt;a href="https://developers.redhat.com/events/"&gt;developer event&lt;/a&gt;, and see our collection of &lt;a href="https://developers.redhat.com/devnation/?page=0"&gt;past DevNation Live tech talks&lt;/a&gt;&lt;a href="https://developers.redhat.com/events/"&gt;.&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F01%2Fdevnation-live-easily-secure-your-cloud-native-microservices-with-keycloak%2F&amp;#38;linkname=DevNation%20Live%3A%20Easily%20secure%20your%20cloud-native%20microservices%20with%20Keycloak" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F01%2Fdevnation-live-easily-secure-your-cloud-native-microservices-with-keycloak%2F&amp;#38;linkname=DevNation%20Live%3A%20Easily%20secure%20your%20cloud-native%20microservices%20with%20Keycloak" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F01%2Fdevnation-live-easily-secure-your-cloud-native-microservices-with-keycloak%2F&amp;#38;linkname=DevNation%20Live%3A%20Easily%20secure%20your%20cloud-native%20microservices%20with%20Keycloak" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F01%2Fdevnation-live-easily-secure-your-cloud-native-microservices-with-keycloak%2F&amp;#38;linkname=DevNation%20Live%3A%20Easily%20secure%20your%20cloud-native%20microservices%20with%20Keycloak" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F01%2Fdevnation-live-easily-secure-your-cloud-native-microservices-with-keycloak%2F&amp;#38;linkname=DevNation%20Live%3A%20Easily%20secure%20your%20cloud-native%20microservices%20with%20Keycloak" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F01%2Fdevnation-live-easily-secure-your-cloud-native-microservices-with-keycloak%2F&amp;#38;linkname=DevNation%20Live%3A%20Easily%20secure%20your%20cloud-native%20microservices%20with%20Keycloak" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F01%2Fdevnation-live-easily-secure-your-cloud-native-microservices-with-keycloak%2F&amp;#38;linkname=DevNation%20Live%3A%20Easily%20secure%20your%20cloud-native%20microservices%20with%20Keycloak" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F01%2Fdevnation-live-easily-secure-your-cloud-native-microservices-with-keycloak%2F&amp;#038;title=DevNation%20Live%3A%20Easily%20secure%20your%20cloud-native%20microservices%20with%20Keycloak" data-a2a-url="https://developers.redhat.com/blog/2019/08/01/devnation-live-easily-secure-your-cloud-native-microservices-with-keycloak/" data-a2a-title="DevNation Live: Easily secure your cloud-native microservices with Keycloak"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/08/01/devnation-live-easily-secure-your-cloud-native-microservices-with-keycloak/"&gt;DevNation Live: Easily secure your cloud-native microservices with Keycloak&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/KSMqZOMmedY" height="1" width="1" alt=""/&gt;</content><summary>DevNation Live tech talks are hosted by the Red Hat technologists who create our products. These sessions include real solutions and code and sample projects to help you get started. In this talk, you’ll learn about Keycloak from Sébastien Blanc, Principal Software Engineer at Red Hat. This tutorial will demonstrate how Keycloak can help you secure your microservices. Regardless of whether it’s a ...</summary><dc:creator>Editorial Team</dc:creator><dc:date>2019-08-01T07:00:28Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/08/01/devnation-live-easily-secure-your-cloud-native-microservices-with-keycloak/</feedburner:origLink></entry><entry><title>Get started with reactive programming with creative Coderland tutorials</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/xfiqajvPhz0/" /><category term="coderland" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="jboss a-mq" scheme="searchisko:content:tags" /><category term="microservices" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><category term="reactive programming" scheme="searchisko:content:tags" /><category term="Reactive Systems" scheme="searchisko:content:tags" /><category term="Red Hat JBoss Data Grid" scheme="searchisko:content:tags" /><author><name>Doug Tidwell</name></author><id>searchisko:content:id:jbossorg_blog-get_started_with_reactive_programming_with_creative_coderland_tutorials</id><updated>2019-07-31T07:05:19Z</updated><published>2019-07-31T07:05:19Z</published><content type="html">&lt;p&gt;The &lt;a href="https://developers.redhat.com/coderland/reactive/"&gt;Reactica roller coaster&lt;/a&gt; is the latest addition to &lt;a href="https://developers.redhat.com/coderland/"&gt;Coderland&lt;/a&gt;, our fictitious amusement park for developers. It illustrates the power of &lt;a href="http://reactivemanifesto.org"&gt;reactive computing&lt;/a&gt;, an important architecture for working with groups of microservices that use asynchronous data to work with each other.&lt;/p&gt; &lt;p&gt;In this scenario, we need to build a web app to display the constantly updated wait time for the coaster.&lt;/p&gt; &lt;p&gt;&lt;span id="more-616957"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;The Reactica roller coaster&lt;/h2&gt; &lt;p&gt;The different microservices in the exercise produce events such as:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;A guest gets in line for the coaster.&lt;/li&gt; &lt;li&gt;A guest gets on the coaster.&lt;/li&gt; &lt;li&gt;A guest gets off the coaster.&lt;/li&gt; &lt;li&gt;A ride starts, carrying some number of guests and changing the status of those guests from &amp;#8220;in line&amp;#8221; to &amp;#8220;on the ride.&amp;#8221;&lt;/li&gt; &lt;li&gt;A ride stops, changing the status of some number of guests to &amp;#8220;completed the ride.&amp;#8221;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The scenario uses &lt;a href="https://developers.redhat.com/products/amq/"&gt;Red Hat AMQ&lt;/a&gt; and &lt;a href="https://developers.redhat.com/products/datagrid/"&gt;Red Hat Data Grid&lt;/a&gt; to do its work. There is a component that generates new &lt;code&gt;User&lt;/code&gt; objects that get in line and new &lt;code&gt;Ride&lt;/code&gt; objects that take some &lt;code&gt;User&lt;/code&gt;s on the ride. The data about those &lt;code&gt;User&lt;/code&gt;s is stored in AMQ and the data grid; the details of the &lt;code&gt;Ride&lt;/code&gt; objects are stored in AMQ. From there, we have several components that watch the data grid and AMQ to change the status of the &lt;code&gt;User&lt;/code&gt; and &lt;code&gt;Ride&lt;/code&gt; objects over time.&lt;/p&gt; &lt;p&gt;The coaster illustrates the basic definition of reactive programming, as defined in &lt;a href="https://gist.github.com/staltz/868e7e9bc2a7b8c1f754"&gt;Andre Staltz&amp;#8217;s reactive tutorial&lt;/a&gt;:&lt;/p&gt; &lt;blockquote&gt;&lt;p&gt;&lt;em&gt;Reactive programming is programming with asynchronous data streams.&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt; &lt;p&gt;By going through the articles and tutorials that accompany &lt;a href="https://www.github.com/reactica/rhte-demo"&gt;the Reactica repo&lt;/a&gt;, you can see how the microservices work together. You can also see the reactive principles of responsiveness and resiliency by stopping parts of the system. The rest of the system keeps working, and you can restart parts of the system and see how the whole application continues to work, recovering data that was created but not propagated across the system while some microservices were down.&lt;/p&gt; &lt;p&gt;Overall, we think it&amp;#8217;s a great introduction to reactive programming. And it&amp;#8217;s a lot of fun; we really enjoyed putting this content together and we hope you like it as well. As always, we&amp;#8217;d love to hear your feedback. You can leave comments in the articles or the YouTube videos, and contact us at &lt;a href="mailto:coderland@redhat.com"&gt;coderland@redhat.com&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Enjoy your visit to &lt;a href="https://developers.redhat.com/coderland/"&gt;Coderland&lt;/a&gt;!&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F31%2Fget-started-with-reactive-programming-with-creative-coderland-tutorials%2F&amp;#38;linkname=Get%20started%20with%20reactive%20programming%20with%20creative%20Coderland%20tutorials" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F31%2Fget-started-with-reactive-programming-with-creative-coderland-tutorials%2F&amp;#38;linkname=Get%20started%20with%20reactive%20programming%20with%20creative%20Coderland%20tutorials" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F31%2Fget-started-with-reactive-programming-with-creative-coderland-tutorials%2F&amp;#38;linkname=Get%20started%20with%20reactive%20programming%20with%20creative%20Coderland%20tutorials" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F31%2Fget-started-with-reactive-programming-with-creative-coderland-tutorials%2F&amp;#38;linkname=Get%20started%20with%20reactive%20programming%20with%20creative%20Coderland%20tutorials" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F31%2Fget-started-with-reactive-programming-with-creative-coderland-tutorials%2F&amp;#38;linkname=Get%20started%20with%20reactive%20programming%20with%20creative%20Coderland%20tutorials" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F31%2Fget-started-with-reactive-programming-with-creative-coderland-tutorials%2F&amp;#38;linkname=Get%20started%20with%20reactive%20programming%20with%20creative%20Coderland%20tutorials" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F31%2Fget-started-with-reactive-programming-with-creative-coderland-tutorials%2F&amp;#38;linkname=Get%20started%20with%20reactive%20programming%20with%20creative%20Coderland%20tutorials" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F31%2Fget-started-with-reactive-programming-with-creative-coderland-tutorials%2F&amp;#038;title=Get%20started%20with%20reactive%20programming%20with%20creative%20Coderland%20tutorials" data-a2a-url="https://developers.redhat.com/blog/2019/07/31/get-started-with-reactive-programming-with-creative-coderland-tutorials/" data-a2a-title="Get started with reactive programming with creative Coderland tutorials"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/07/31/get-started-with-reactive-programming-with-creative-coderland-tutorials/"&gt;Get started with reactive programming with creative Coderland tutorials&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/xfiqajvPhz0" height="1" width="1" alt=""/&gt;</content><summary>The Reactica roller coaster is the latest addition to Coderland, our fictitious amusement park for developers. It illustrates the power of reactive computing, an important architecture for working with groups of microservices that use asynchronous data to work with each other. In this scenario, we need to build a web app to display the constantly updated wait time for the coaster. The Reactica rol...</summary><dc:creator>Doug Tidwell</dc:creator><dc:date>2019-07-31T07:05:19Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/07/31/get-started-with-reactive-programming-with-creative-coderland-tutorials/</feedburner:origLink></entry><entry><title>Using the 3scale toolbox Jenkins Shared Library</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/7vi4mCBcjPM/" /><category term="API" scheme="searchisko:content:tags" /><category term="ci/cd" scheme="searchisko:content:tags" /><category term="devops" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="jenkins" scheme="searchisko:content:tags" /><category term="Jenkins pipeline" scheme="searchisko:content:tags" /><category term="Red Hat 3scale API Management" scheme="searchisko:content:tags" /><category term="Red Hat Integration" scheme="searchisko:content:tags" /><author><name>Nicolas Massé</name></author><id>searchisko:content:id:jbossorg_blog-using_the_3scale_toolbox_jenkins_shared_library</id><updated>2019-07-31T07:00:21Z</updated><published>2019-07-31T07:00:21Z</published><content type="html">&lt;p&gt;In the previous article of this series, &lt;a href="https://developers.redhat.com/blog/?p=612387"&gt;Deploy your API from a Jenkins Pipeline&lt;/a&gt;, we discovered how the 3scale toolbox can help you deploy your API from a Jenkins Pipeline on &lt;a href="http://developers.redhat.com/openshift/"&gt;Red Hat OpenShift&lt;/a&gt;/Kubernetes. In this article, we will improve the pipeline from the previous article to make it more robust, less verbose, and also offer more features by using the 3scale toolbox Jenkins Shared Library.&lt;span id="more-612407"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;What needs to be improved&lt;/h2&gt; &lt;p&gt;Although it was not perfect, the pipeline we designed in the previous article was simple and self-contained. To support production workloads, however, some minor aspects need to be improved:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;The &amp;#8220;runToolbox&amp;#8221; helper method was duplicated in each pipeline.&lt;/li&gt; &lt;li&gt;There are several delays used in the &amp;#8220;runToolbox&amp;#8221; method and tuning those delays proved to be tricky.&lt;/li&gt; &lt;li&gt;Everything is hardcoded: if we need to change some API metadata, the Pipeline code needs to be updated. A &amp;#8220;manifest&amp;#8221; would separate the code from the configuration.&lt;/li&gt; &lt;li&gt;The test credentials are hardcoded. To match most companies&amp;#8217; security policies, we would need to generate those test credentials dynamically.&lt;/li&gt; &lt;li&gt;The &amp;#8220;runToolbox&amp;#8221; helper method has not been designed to handle multiple parallel runs of the 3scale toolbox.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;There is nothing hard or complicated with those improvements; that&amp;#8217;s the daily bread of every Jenkins Pipeline writer!&lt;/p&gt; &lt;h2&gt;Introducing the Toolbox Jenkins Shared Library&lt;/h2&gt; &lt;p&gt;To help the Jenkins Pipeline writer, the community around Red Hat Integration came up with a Jenkins Shared Library named &lt;a href="https://github.com/rh-integration/3scale-toolbox-jenkins"&gt;3scale-toolbox-jenkins&lt;/a&gt;. It features the following improvements:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;All the code has been factorized in a &lt;a href="https://jenkins.io/doc/book/pipeline/shared-libraries/"&gt;Jenkins Shared Library&lt;/a&gt; and can be reused in all your pipelines.&lt;/li&gt; &lt;li&gt;A polling loop is used everywhere the pipeline has to wait for an action to complete. No more delay to tune.&lt;/li&gt; &lt;li&gt;The Toolbox Jenkins Shared Library is fed with an API metadata manifest. You can change the API metadata without having to change your pipeline code.&lt;/li&gt; &lt;li&gt;The test credentials are generated dynamically from a hash-based message authentication code (HMAC) function. HMAC has been used instead of random data in order to remain idempotent. No matter how many runs of the Jenkins pipeline, the test credentials remain the same but still unguessable.&lt;/li&gt; &lt;li&gt;Multiple parallel runs of the toolbox are possible because all the Kubernetes objects are prefixed and labeled with the Jenkins build name and number.&lt;/li&gt; &lt;li&gt;It uses the &lt;a href="https://github.com/openshift/jenkins-client-plugin"&gt;Jenkins OpenShift Client plugin&lt;/a&gt; underneath, which makes it more reliable than the bare &lt;code&gt;oc&lt;/code&gt; command.&lt;/li&gt; &lt;li&gt;Semantic versioning is implemented to simplify the management of multiple API versions.&lt;/li&gt; &lt;/ul&gt; &lt;h2&gt;First steps with the toolbox Jenkins Shared Library&lt;/h2&gt; &lt;p&gt;At the beginning of your Jenkins Pipeline, import the toolbox Jenkins Shared Library:&lt;/p&gt; &lt;pre&gt;library identifier: '3scale-toolbox-jenkins@master', retriever: modernSCM([$class: 'GitSCMSource', remote: 'https://github.com/rh-integration/3scale-toolbox-jenkins.git'])&lt;/pre&gt; &lt;p&gt;Declare a global variable that will hold the ThreescaleService object, so you can use it from the different stages of your pipeline:&lt;/p&gt; &lt;pre&gt;def service = null&lt;/pre&gt; &lt;p&gt;From an early stage of your Jenkins Pipeline, you can create the ThreescaleService object from your API metadata manifest:&lt;/p&gt; &lt;pre&gt;service = toolbox.prepareThreescaleService( openapi: [ filename: "swagger.json" ], environment: [ baseSystemName: "my_service" ], toolbox: [ openshiftProject: "toolbox", destination: "3scale-tenant", secretName: "3scale-toolbox" ], service: [:], applications: [ [ name: "my-test-app", description: "This is used for tests", plan: "test", account: "john" ] ], applicationPlans: [ [ systemName: "test", name: "Test", defaultPlan: true, published: true ], [ systemName: "silver", name: "Silver" ], [ artefactFile: "https://raw.githubusercontent.com/redhatHameed/API-Lifecycle-Mockup/master/testcase-01/plan.yaml"] ] )&lt;/pre&gt; &lt;p&gt;In this example, the API metadata manifest has been inlined in the Pipeline, but you can store it in a YAML file in your Git repository and load it using the &lt;a href="https://jenkins.io/doc/pipeline/steps/pipeline-utility-steps/#readyaml-read-yaml-from-files-in-the-workspace-or-text"&gt;readYAML step&lt;/a&gt;. This way, your API metadata can change but your pipeline code remains the same.&lt;/p&gt; &lt;p&gt;You can then create all the API management objects anywhere relevant in your pipeline:&lt;/p&gt; &lt;pre&gt;service.importOpenAPI() echo "Service with system_name ${service.environment.targetSystemName} created !" service.applyApplicationPlans() service.applyApplication()&lt;/pre&gt; &lt;p&gt;Running end-to-end tests is easy, too. Notice how the test credentials are managed automatically:&lt;/p&gt; &lt;pre&gt;def proxy = service.readProxy("sandbox") sh """ curl -vfk ${proxy.sandbox_endpoint}/api/beer -H 'api-key: ${service.applications[0].userkey}' curl -vfk ${proxy.sandbox_endpoint}/api/beer/Weissbier -H 'api-key: ${service.applications[0].userkey}' curl -vfk ${proxy.sandbox_endpoint}/api/beer/findByStatus/available -H 'api-key: ${service.applications[0].userkey}' """&lt;/pre&gt; &lt;p&gt;Finally, you can promote the new configuration to the production gateway:&lt;/p&gt; &lt;pre&gt;service.promoteToProduction()&lt;/pre&gt; &lt;h2&gt;Jenkins Pipeline examples&lt;/h2&gt; &lt;p&gt;We prepared a series of five Jenkins pipelines that showcase the use of the 3scale toolbox Jenkins Shared Library in different contexts:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;A very simple API secured with API Keys and deployed in 3scale hosted.&lt;/li&gt; &lt;li&gt;An Open API (no security) deployed in a hybrid architecture: 3scale hosted and on-premises.&lt;/li&gt; &lt;li&gt;An API secured with OpenID Connect deployed in the same hybrid architecture.&lt;/li&gt; &lt;li&gt;The same API deployed in three different environments (DEV, TEST, and PROD)&lt;/li&gt; &lt;li&gt;An API deployed in those three environments and with semantic versioning applied (four versions released, combining different security schemes).&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;You can find those examples in the &lt;a href="https://github.com/rh-integration/3scale-toolbox-jenkins-samples"&gt;3scale-toolbox-jenkins-samples repository&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;If you prefer a real-world example, the &lt;a href="https://github.com/rh-integration/IntegrationApp-Automation"&gt;IntegrationApp-Automation repository&lt;/a&gt; contains a composite application that showcases an API deployed through a Jenkins Pipeline.&lt;/p&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;In this article, we presented a convenient way for Jenkins Pipeline writers to publish their APIs using the 3scale toolbox. This Jenkins Shared Library is presented as best practices and sample code for Jenkins Pipeline writers to use in their daily job. You can choose to reuse this library as-is and contribute to the upstream community or copy it and make it yours!&lt;/p&gt; &lt;h3&gt;Read more&lt;/h3&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/?p=608917"&gt;5 principles for deploying your API from a CI/CD pipeline&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/?p=611307"&gt;3scale toolbox: Deploy an API from the CLI&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/?p=612387"&gt;Deploy your API from a Jenkins Pipeline&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F31%2Fusing-the-3scale-toolbox-jenkins-shared-library%2F&amp;#38;linkname=Using%20the%203scale%20toolbox%20Jenkins%20Shared%20Library" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F31%2Fusing-the-3scale-toolbox-jenkins-shared-library%2F&amp;#38;linkname=Using%20the%203scale%20toolbox%20Jenkins%20Shared%20Library" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F31%2Fusing-the-3scale-toolbox-jenkins-shared-library%2F&amp;#38;linkname=Using%20the%203scale%20toolbox%20Jenkins%20Shared%20Library" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F31%2Fusing-the-3scale-toolbox-jenkins-shared-library%2F&amp;#38;linkname=Using%20the%203scale%20toolbox%20Jenkins%20Shared%20Library" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F31%2Fusing-the-3scale-toolbox-jenkins-shared-library%2F&amp;#38;linkname=Using%20the%203scale%20toolbox%20Jenkins%20Shared%20Library" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F31%2Fusing-the-3scale-toolbox-jenkins-shared-library%2F&amp;#38;linkname=Using%20the%203scale%20toolbox%20Jenkins%20Shared%20Library" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F31%2Fusing-the-3scale-toolbox-jenkins-shared-library%2F&amp;#38;linkname=Using%20the%203scale%20toolbox%20Jenkins%20Shared%20Library" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F31%2Fusing-the-3scale-toolbox-jenkins-shared-library%2F&amp;#038;title=Using%20the%203scale%20toolbox%20Jenkins%20Shared%20Library" data-a2a-url="https://developers.redhat.com/blog/2019/07/31/using-the-3scale-toolbox-jenkins-shared-library/" data-a2a-title="Using the 3scale toolbox Jenkins Shared Library"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/07/31/using-the-3scale-toolbox-jenkins-shared-library/"&gt;Using the 3scale toolbox Jenkins Shared Library&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/7vi4mCBcjPM" height="1" width="1" alt=""/&gt;</content><summary>In the previous article of this series, Deploy your API from a Jenkins Pipeline, we discovered how the 3scale toolbox can help you deploy your API from a Jenkins Pipeline on Red Hat OpenShift/Kubernetes. In this article, we will improve the pipeline from the previous article to make it more robust, less verbose, and also offer more features by using the 3scale toolbox Jenkins Shared Library. What ...</summary><dc:creator>Nicolas Massé</dc:creator><dc:date>2019-07-31T07:00:21Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/07/31/using-the-3scale-toolbox-jenkins-shared-library/</feedburner:origLink></entry><entry><title>How to set up Red Hat CodeReady Studio 12: Process automation tooling</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/Mp51uvvIhx0/" /><category term="CodeReady portfolio" scheme="searchisko:content:tags" /><category term="CodeReady Workspaces" scheme="searchisko:content:tags" /><category term="developer" scheme="searchisko:content:tags" /><category term="developer tool" scheme="searchisko:content:tags" /><category term="Developer Tools" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="Java" scheme="searchisko:content:tags" /><category term="Modern App Dev" scheme="searchisko:content:tags" /><category term="Red Hat Process Automation Manager" scheme="searchisko:content:tags" /><author><name>Eric D. Schabell</name></author><id>searchisko:content:id:jbossorg_blog-how_to_set_up_red_hat_codeready_studio_12_process_automation_tooling</id><updated>2019-07-30T07:00:51Z</updated><published>2019-07-30T07:00:51Z</published><content type="html">&lt;p&gt;The release of the latest Red Hat developer suite version 12 included a name change from Red Hat JBoss Developer Studio to &lt;a href="https://developers.redhat.com/products/codeready-studio/overview"&gt;Red Hat CodeReady Studio&lt;/a&gt;. The focus here is not on the Red Hat CodeReady Workspaces, a cloud and container development experience, but on the locally installed developers studio. Given that, you might have questions about how to get started with the various Red Hat integration, data, and process automation product toolsets that are not installed out of the box.&lt;/p&gt; &lt;p&gt;In this series of articles, we&amp;#8217;ll show how to install each set of tools and explain the various products they support. We hope these tips will help you make informed decisions about the tooling you might want to use on your next development project.&lt;/p&gt; &lt;p&gt;There are three different software packs that offer tooling for various Red Hat middleware technologies:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2019/05/29/how-to-set-up-red-hat-codeready-studio-12-integration-tooling/" target="_blank" rel="noopener noreferrer"&gt;Red Hat Integration Development&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Red Hat Process Automation Development&lt;/strong&gt;&lt;/li&gt; &lt;li&gt;Red Hat Data Virtualization Development&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;Here, we&amp;#8217;ll outline how to get started with the &lt;em&gt;Red Hat Process Automation tooling&lt;/em&gt; with any of the CodeReady Studio version 12 releases.&lt;/p&gt; &lt;div id="attachment_617047" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-617047" class="wp-image-617047 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2019/07/RH-automation-tooling-1024x356.png" alt="RH automation tooling" width="640" height="223" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/07/RH-automation-tooling-1024x356.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/07/RH-automation-tooling-300x104.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/07/RH-automation-tooling-768x267.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-617047" class="wp-caption-text"&gt;Overview of the development add-on tooling.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;&lt;span style="font-size: 16px;"&gt;Red Hat CodeReady Studio can be obtained through the &lt;/span&gt;&lt;a style="font-size: 16px;" href="https://access.redhat.com/jbossnetwork/restricted/listSoftware.html" target="_blank" rel="noopener noreferrer"&gt;Customer Portal&lt;/a&gt;&lt;span style="font-size: 16px;"&gt; (login required) or via the &lt;/span&gt;&lt;a style="font-size: 16px;" href="https://developers.redhat.com/products/devstudio/download/" target="_blank" rel="noopener noreferrer"&gt;early access downloads on developers.redhat.com&lt;/a&gt;&lt;span style="font-size: 16px;"&gt;. After installation, start it up and you will see a welcoming &lt;/span&gt;&lt;i style="font-size: 16px;"&gt;Red Hat Central&lt;/i&gt;&lt;span style="font-size: 16px;"&gt; tab with at the bottom a tab to look at the available toolsets labeled &lt;/span&gt;&lt;i style="font-size: 16px;"&gt;Software/Update&lt;/i&gt;&lt;span style="font-size: 16px;"&gt;.&lt;/span&gt;&lt;/p&gt; &lt;h3&gt;Installation&lt;/h3&gt; &lt;div id="attachment_617057" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-617057" class="wp-image-617057 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2019/07/RH-automation-tooling-add-on-1024x501.png" alt="RH automation tooling add-on" width="640" height="313" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/07/RH-automation-tooling-add-on-1024x501.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/07/RH-automation-tooling-add-on-300x147.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/07/RH-automation-tooling-add-on-768x376.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-617057" class="wp-caption-text"&gt;Selecting process automation tooling add-on.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Clicking on the &lt;i&gt;Install/Update&lt;/i&gt; button starts the add-on installation, and restarting the CodeReady Studio at the end completes the process. If you are interested in what&amp;#8217;s being installed, you can check the pop-up listing of components and versions. Note that this will change as the early access progresses toward final releases.At the time of this writing, you have several options, which you can find on the &lt;i&gt;Software/Update&lt;/i&gt; tab. Selecting the &lt;i&gt;Software/Update &lt;/i&gt;tab at the bottom lists the Red Hat &lt;i&gt;Development &lt;/i&gt;tooling add-ons. Let&amp;#8217;s select &lt;i&gt;Red Hat Business Process and Rules Development&lt;/i&gt; check box. Note that if you previously installed any of these tooling add-ons, your list of options will not include them all.&lt;/p&gt; &lt;table class="tr-caption-container" cellspacing="0" cellpadding="0"&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;&lt;a href="https://3.bp.blogspot.com/-GJHGBVDIGQ8/XNwUhNHNFOI/AAAAAAAAtrA/_zhh0Awzz7wDxJnMPFDKg8wXu3lRAKClACLcBGAs/s1600/Screenshot%2B2019-05-15%2Bat%2B15.30.17.png"&gt;&lt;img title="" src="https://3.bp.blogspot.com/-GJHGBVDIGQ8/XNwUhNHNFOI/AAAAAAAAtrA/_zhh0Awzz7wDxJnMPFDKg8wXu3lRAKClACLcBGAs/s320/Screenshot%2B2019-05-15%2Bat%2B15.30.17.png" alt="codeready studio" width="320" height="172" border="0" data-original-width="1600" data-original-height="865" /&gt;&lt;/a&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td class="tr-caption"&gt;Installing components.&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;p&gt;Stay tuned for more articles that will detail the installation of the remaining development add-on tooling.&lt;/p&gt; &lt;h3&gt;Read more&lt;/h3&gt; &lt;p&gt;See below for development tooling needs on previous versions of the studio:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2019/05/29/how-to-set-up-red-hat-codeready-studio-12-integration-tooling/"&gt;How To Set up Integration Tooling for CodeReady Studio 12: Integration tooling&lt;/a&gt;&lt;/li&gt; &lt;li&gt;How To Set up Data Virtualization Tooling for CodeReady Studio 12 (coming soon&amp;#8230;)&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F30%2Fhow-to-set-up-red-hat-codeready-studio-12-process-automation-tooling%2F&amp;#38;linkname=How%20to%20set%20up%20Red%20Hat%20CodeReady%20Studio%2012%3A%20Process%20automation%20tooling" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F30%2Fhow-to-set-up-red-hat-codeready-studio-12-process-automation-tooling%2F&amp;#38;linkname=How%20to%20set%20up%20Red%20Hat%20CodeReady%20Studio%2012%3A%20Process%20automation%20tooling" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F30%2Fhow-to-set-up-red-hat-codeready-studio-12-process-automation-tooling%2F&amp;#38;linkname=How%20to%20set%20up%20Red%20Hat%20CodeReady%20Studio%2012%3A%20Process%20automation%20tooling" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F30%2Fhow-to-set-up-red-hat-codeready-studio-12-process-automation-tooling%2F&amp;#38;linkname=How%20to%20set%20up%20Red%20Hat%20CodeReady%20Studio%2012%3A%20Process%20automation%20tooling" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F30%2Fhow-to-set-up-red-hat-codeready-studio-12-process-automation-tooling%2F&amp;#38;linkname=How%20to%20set%20up%20Red%20Hat%20CodeReady%20Studio%2012%3A%20Process%20automation%20tooling" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F30%2Fhow-to-set-up-red-hat-codeready-studio-12-process-automation-tooling%2F&amp;#38;linkname=How%20to%20set%20up%20Red%20Hat%20CodeReady%20Studio%2012%3A%20Process%20automation%20tooling" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F30%2Fhow-to-set-up-red-hat-codeready-studio-12-process-automation-tooling%2F&amp;#38;linkname=How%20to%20set%20up%20Red%20Hat%20CodeReady%20Studio%2012%3A%20Process%20automation%20tooling" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F30%2Fhow-to-set-up-red-hat-codeready-studio-12-process-automation-tooling%2F&amp;#038;title=How%20to%20set%20up%20Red%20Hat%20CodeReady%20Studio%2012%3A%20Process%20automation%20tooling" data-a2a-url="https://developers.redhat.com/blog/2019/07/30/how-to-set-up-red-hat-codeready-studio-12-process-automation-tooling/" data-a2a-title="How to set up Red Hat CodeReady Studio 12: Process automation tooling"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/07/30/how-to-set-up-red-hat-codeready-studio-12-process-automation-tooling/"&gt;How to set up Red Hat CodeReady Studio 12: Process automation tooling&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/Mp51uvvIhx0" height="1" width="1" alt=""/&gt;</content><summary>The release of the latest Red Hat developer suite version 12 included a name change from Red Hat JBoss Developer Studio to Red Hat CodeReady Studio. The focus here is not on the Red Hat CodeReady Workspaces, a cloud and container development experience, but on the locally installed developers studio. Given that, you might have questions about how to get started with the various Red Hat integration...</summary><dc:creator>Eric D. Schabell</dc:creator><dc:date>2019-07-30T07:00:51Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/07/30/how-to-set-up-red-hat-codeready-studio-12-process-automation-tooling/</feedburner:origLink></entry></feed>
